// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/SpiderMouseEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpiderMouseEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SpiderMouseEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiderMouseEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SpiderMouseEvent_MouseEventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Proto_2fSpiderMouseEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Proto_2fSpiderMouseEvent_2eproto() {
  protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Proto/SpiderMouseEvent.proto");
  GOOGLE_CHECK(file != NULL);
  SpiderMouseEvent_descriptor_ = file->message_type(0);
  static const int SpiderMouseEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderMouseEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderMouseEvent, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderMouseEvent, y_),
  };
  SpiderMouseEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpiderMouseEvent_descriptor_,
      SpiderMouseEvent::internal_default_instance(),
      SpiderMouseEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpiderMouseEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderMouseEvent, _internal_metadata_));
  SpiderMouseEvent_MouseEventType_descriptor_ = SpiderMouseEvent_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Proto_2fSpiderMouseEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpiderMouseEvent_descriptor_, SpiderMouseEvent::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Proto_2fSpiderMouseEvent_2eproto() {
  SpiderMouseEvent_default_instance_.Shutdown();
  delete SpiderMouseEvent_reflection_;
}

void protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  SpiderMouseEvent_default_instance_.DefaultConstruct();
  SpiderMouseEvent_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto_once_);
void protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto_once_,
                 &protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto_impl);
}
void protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034Proto/SpiderMouseEvent.proto\"\305\001\n\020Spide"
    "rMouseEvent\022.\n\004type\030\001 \001(\0162 .SpiderMouseE"
    "vent.MouseEventType\022\t\n\001X\030\002 \001(\r\022\t\n\001Y\030\003 \001("
    "\r\"k\n\016MouseEventType\022\021\n\rRBUTTON_CLICK\020\000\022\021"
    "\n\rLBUTTON_CLICK\020\001\022\021\n\rMBUTTON_CLICK\020\004\022\016\n\n"
    "MBUTTON_UP\020\002\022\020\n\014MBUTTON_DOWN\020\003b\006proto3", 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Proto/SpiderMouseEvent.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Proto_2fSpiderMouseEvent_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto_once_);
void protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto_once_,
                 &protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Proto_2fSpiderMouseEvent_2eproto {
  StaticDescriptorInitializer_Proto_2fSpiderMouseEvent_2eproto() {
    protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto();
  }
} static_descriptor_initializer_Proto_2fSpiderMouseEvent_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* SpiderMouseEvent_MouseEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiderMouseEvent_MouseEventType_descriptor_;
}
bool SpiderMouseEvent_MouseEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SpiderMouseEvent_MouseEventType SpiderMouseEvent::RBUTTON_CLICK;
const SpiderMouseEvent_MouseEventType SpiderMouseEvent::LBUTTON_CLICK;
const SpiderMouseEvent_MouseEventType SpiderMouseEvent::MBUTTON_CLICK;
const SpiderMouseEvent_MouseEventType SpiderMouseEvent::MBUTTON_UP;
const SpiderMouseEvent_MouseEventType SpiderMouseEvent::MBUTTON_DOWN;
const SpiderMouseEvent_MouseEventType SpiderMouseEvent::MouseEventType_MIN;
const SpiderMouseEvent_MouseEventType SpiderMouseEvent::MouseEventType_MAX;
const int SpiderMouseEvent::MouseEventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiderMouseEvent::kTypeFieldNumber;
const int SpiderMouseEvent::kXFieldNumber;
const int SpiderMouseEvent::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiderMouseEvent::SpiderMouseEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiderMouseEvent)
}

void SpiderMouseEvent::InitAsDefaultInstance() {
}

SpiderMouseEvent::SpiderMouseEvent(const SpiderMouseEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiderMouseEvent)
}

void SpiderMouseEvent::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_) + sizeof(y_));
  _cached_size_ = 0;
}

SpiderMouseEvent::~SpiderMouseEvent() {
  // @@protoc_insertion_point(destructor:SpiderMouseEvent)
  SharedDtor();
}

void SpiderMouseEvent::SharedDtor() {
}

void SpiderMouseEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiderMouseEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiderMouseEvent_descriptor_;
}

const SpiderMouseEvent& SpiderMouseEvent::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SpiderMouseEvent> SpiderMouseEvent_default_instance_;

SpiderMouseEvent* SpiderMouseEvent::New(::google::protobuf::Arena* arena) const {
  SpiderMouseEvent* n = new SpiderMouseEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpiderMouseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:SpiderMouseEvent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SpiderMouseEvent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SpiderMouseEvent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool SpiderMouseEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiderMouseEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SpiderMouseEvent.MouseEventType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::SpiderMouseEvent_MouseEventType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_X;
        break;
      }

      // optional uint32 X = 2;
      case 2: {
        if (tag == 16) {
         parse_X:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Y;
        break;
      }

      // optional uint32 Y = 3;
      case 3: {
        if (tag == 24) {
         parse_Y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiderMouseEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiderMouseEvent)
  return false;
#undef DO_
}

void SpiderMouseEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiderMouseEvent)
  // optional .SpiderMouseEvent.MouseEventType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 X = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // optional uint32 Y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:SpiderMouseEvent)
}

::google::protobuf::uint8* SpiderMouseEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SpiderMouseEvent)
  // optional .SpiderMouseEvent.MouseEventType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 X = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // optional uint32 Y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SpiderMouseEvent)
  return target;
}

size_t SpiderMouseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpiderMouseEvent)
  size_t total_size = 0;

  // optional .SpiderMouseEvent.MouseEventType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 X = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // optional uint32 Y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiderMouseEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpiderMouseEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SpiderMouseEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiderMouseEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpiderMouseEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpiderMouseEvent)
    UnsafeMergeFrom(*source);
  }
}

void SpiderMouseEvent::MergeFrom(const SpiderMouseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpiderMouseEvent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SpiderMouseEvent::UnsafeMergeFrom(const SpiderMouseEvent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void SpiderMouseEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpiderMouseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiderMouseEvent::CopyFrom(const SpiderMouseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpiderMouseEvent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SpiderMouseEvent::IsInitialized() const {

  return true;
}

void SpiderMouseEvent::Swap(SpiderMouseEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiderMouseEvent::InternalSwap(SpiderMouseEvent* other) {
  std::swap(type_, other->type_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpiderMouseEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiderMouseEvent_descriptor_;
  metadata.reflection = SpiderMouseEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpiderMouseEvent

// optional .SpiderMouseEvent.MouseEventType type = 1;
void SpiderMouseEvent::clear_type() {
  type_ = 0;
}
::SpiderMouseEvent_MouseEventType SpiderMouseEvent::type() const {
  // @@protoc_insertion_point(field_get:SpiderMouseEvent.type)
  return static_cast< ::SpiderMouseEvent_MouseEventType >(type_);
}
void SpiderMouseEvent::set_type(::SpiderMouseEvent_MouseEventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SpiderMouseEvent.type)
}

// optional uint32 X = 2;
void SpiderMouseEvent::clear_x() {
  x_ = 0u;
}
::google::protobuf::uint32 SpiderMouseEvent::x() const {
  // @@protoc_insertion_point(field_get:SpiderMouseEvent.X)
  return x_;
}
void SpiderMouseEvent::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SpiderMouseEvent.X)
}

// optional uint32 Y = 3;
void SpiderMouseEvent::clear_y() {
  y_ = 0u;
}
::google::protobuf::uint32 SpiderMouseEvent::y() const {
  // @@protoc_insertion_point(field_get:SpiderMouseEvent.Y)
  return y_;
}
void SpiderMouseEvent::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SpiderMouseEvent.Y)
}

inline const SpiderMouseEvent* SpiderMouseEvent::internal_default_instance() {
  return &SpiderMouseEvent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
