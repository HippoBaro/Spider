// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/SpiderCommandResponse.proto

#ifndef PROTOBUF_Proto_2fSpiderCommandResponse_2eproto__INCLUDED
#define PROTOBUF_Proto_2fSpiderCommandResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Proto_2fSpiderCommandResponse_2eproto();
void protobuf_InitDefaults_Proto_2fSpiderCommandResponse_2eproto();
void protobuf_AssignDesc_Proto_2fSpiderCommandResponse_2eproto();
void protobuf_ShutdownFile_Proto_2fSpiderCommandResponse_2eproto();

class SpiderCommandResponse;

// ===================================================================

class SpiderCommandResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SpiderCommandResponse) */ {
 public:
  SpiderCommandResponse();
  virtual ~SpiderCommandResponse();

  SpiderCommandResponse(const SpiderCommandResponse& from);

  inline SpiderCommandResponse& operator=(const SpiderCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpiderCommandResponse& default_instance();

  static const SpiderCommandResponse* internal_default_instance();

  void Swap(SpiderCommandResponse* other);

  // implements Message ----------------------------------------------

  inline SpiderCommandResponse* New() const { return New(NULL); }

  SpiderCommandResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpiderCommandResponse& from);
  void MergeFrom(const SpiderCommandResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpiderCommandResponse* other);
  void UnsafeMergeFrom(const SpiderCommandResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PayloadType = 1;
  void clear_payloadtype();
  static const int kPayloadTypeFieldNumber = 1;
  const ::std::string& payloadtype() const;
  void set_payloadtype(const ::std::string& value);
  void set_payloadtype(const char* value);
  void set_payloadtype(const char* value, size_t size);
  ::std::string* mutable_payloadtype();
  ::std::string* release_payloadtype();
  void set_allocated_payloadtype(::std::string* payloadtype);

  // optional .google.protobuf.Any Payload = 2;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::google::protobuf::Any& payload() const;
  ::google::protobuf::Any* mutable_payload();
  ::google::protobuf::Any* release_payload();
  void set_allocated_payload(::google::protobuf::Any* payload);

  // @@protoc_insertion_point(class_scope:SpiderCommandResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payloadtype_;
  ::google::protobuf::Any* payload_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_Proto_2fSpiderCommandResponse_2eproto_impl();
  friend void  protobuf_AddDesc_Proto_2fSpiderCommandResponse_2eproto_impl();
  friend void protobuf_AssignDesc_Proto_2fSpiderCommandResponse_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fSpiderCommandResponse_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SpiderCommandResponse> SpiderCommandResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpiderCommandResponse

// optional string PayloadType = 1;
inline void SpiderCommandResponse::clear_payloadtype() {
  payloadtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpiderCommandResponse::payloadtype() const {
  // @@protoc_insertion_point(field_get:SpiderCommandResponse.PayloadType)
  return payloadtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpiderCommandResponse::set_payloadtype(const ::std::string& value) {
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SpiderCommandResponse.PayloadType)
}
inline void SpiderCommandResponse::set_payloadtype(const char* value) {
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpiderCommandResponse.PayloadType)
}
inline void SpiderCommandResponse::set_payloadtype(const char* value, size_t size) {
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpiderCommandResponse.PayloadType)
}
inline ::std::string* SpiderCommandResponse::mutable_payloadtype() {
  
  // @@protoc_insertion_point(field_mutable:SpiderCommandResponse.PayloadType)
  return payloadtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpiderCommandResponse::release_payloadtype() {
  // @@protoc_insertion_point(field_release:SpiderCommandResponse.PayloadType)
  
  return payloadtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpiderCommandResponse::set_allocated_payloadtype(::std::string* payloadtype) {
  if (payloadtype != NULL) {
    
  } else {
    
  }
  payloadtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payloadtype);
  // @@protoc_insertion_point(field_set_allocated:SpiderCommandResponse.PayloadType)
}

// optional .google.protobuf.Any Payload = 2;
inline bool SpiderCommandResponse::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
inline void SpiderCommandResponse::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
inline const ::google::protobuf::Any& SpiderCommandResponse::payload() const {
  // @@protoc_insertion_point(field_get:SpiderCommandResponse.Payload)
  return payload_ != NULL ? *payload_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* SpiderCommandResponse::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:SpiderCommandResponse.Payload)
  return payload_;
}
inline ::google::protobuf::Any* SpiderCommandResponse::release_payload() {
  // @@protoc_insertion_point(field_release:SpiderCommandResponse.Payload)
  
  ::google::protobuf::Any* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline void SpiderCommandResponse::set_allocated_payload(::google::protobuf::Any* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SpiderCommandResponse.Payload)
}

inline const SpiderCommandResponse* SpiderCommandResponse::internal_default_instance() {
  return &SpiderCommandResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Proto_2fSpiderCommandResponse_2eproto__INCLUDED
