// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdPacket.proto

#ifndef PROTOBUF_CmdPacket_2eproto__INCLUDED
#define PROTOBUF_CmdPacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace spider {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CmdPacket_2eproto();
void protobuf_AssignDesc_CmdPacket_2eproto();
void protobuf_ShutdownFile_CmdPacket_2eproto();

class RequestPacket;
class RequestPacket_CmdPacket;

enum RequestPacket_MethodID {
  RequestPacket_MethodID_LIST = 0,
  RequestPacket_MethodID_GET = 1,
  RequestPacket_MethodID_SEND = 2
};
bool RequestPacket_MethodID_IsValid(int value);
const RequestPacket_MethodID RequestPacket_MethodID_MethodID_MIN = RequestPacket_MethodID_LIST;
const RequestPacket_MethodID RequestPacket_MethodID_MethodID_MAX = RequestPacket_MethodID_SEND;
const int RequestPacket_MethodID_MethodID_ARRAYSIZE = RequestPacket_MethodID_MethodID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestPacket_MethodID_descriptor();
inline const ::std::string& RequestPacket_MethodID_Name(RequestPacket_MethodID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestPacket_MethodID_descriptor(), value);
}
inline bool RequestPacket_MethodID_Parse(
    const ::std::string& name, RequestPacket_MethodID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestPacket_MethodID>(
    RequestPacket_MethodID_descriptor(), name, value);
}
// ===================================================================

class RequestPacket_CmdPacket : public ::google::protobuf::Message {
 public:
  RequestPacket_CmdPacket();
  virtual ~RequestPacket_CmdPacket();

  RequestPacket_CmdPacket(const RequestPacket_CmdPacket& from);

  inline RequestPacket_CmdPacket& operator=(const RequestPacket_CmdPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPacket_CmdPacket& default_instance();

  void Swap(RequestPacket_CmdPacket* other);

  // implements Message ----------------------------------------------

  RequestPacket_CmdPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPacket_CmdPacket& from);
  void MergeFrom(const RequestPacket_CmdPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TargetUUID = 1;
  inline bool has_targetuuid() const;
  inline void clear_targetuuid();
  static const int kTargetUUIDFieldNumber = 1;
  inline const ::std::string& targetuuid() const;
  inline void set_targetuuid(const ::std::string& value);
  inline void set_targetuuid(const char* value);
  inline void set_targetuuid(const char* value, size_t size);
  inline ::std::string* mutable_targetuuid();
  inline ::std::string* release_targetuuid();
  inline void set_allocated_targetuuid(::std::string* targetuuid);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Argument = 3;
  inline bool has_argument() const;
  inline void clear_argument();
  static const int kArgumentFieldNumber = 3;
  inline const ::std::string& argument() const;
  inline void set_argument(const ::std::string& value);
  inline void set_argument(const char* value);
  inline void set_argument(const char* value, size_t size);
  inline ::std::string* mutable_argument();
  inline ::std::string* release_argument();
  inline void set_allocated_argument(::std::string* argument);

  // @@protoc_insertion_point(class_scope:spider.RequestPacket.CmdPacket)
 private:
  inline void set_has_targetuuid();
  inline void clear_has_targetuuid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_argument();
  inline void clear_has_argument();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* targetuuid_;
  ::std::string* name_;
  ::std::string* argument_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdPacket_2eproto();
  friend void protobuf_AssignDesc_CmdPacket_2eproto();
  friend void protobuf_ShutdownFile_CmdPacket_2eproto();

  void InitAsDefaultInstance();
  static RequestPacket_CmdPacket* default_instance_;
};
// -------------------------------------------------------------------

class RequestPacket : public ::google::protobuf::Message {
 public:
  RequestPacket();
  virtual ~RequestPacket();

  RequestPacket(const RequestPacket& from);

  inline RequestPacket& operator=(const RequestPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPacket& default_instance();

  void Swap(RequestPacket* other);

  // implements Message ----------------------------------------------

  RequestPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPacket& from);
  void MergeFrom(const RequestPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RequestPacket_CmdPacket CmdPacket;

  typedef RequestPacket_MethodID MethodID;
  static const MethodID LIST = RequestPacket_MethodID_LIST;
  static const MethodID GET = RequestPacket_MethodID_GET;
  static const MethodID SEND = RequestPacket_MethodID_SEND;
  static inline bool MethodID_IsValid(int value) {
    return RequestPacket_MethodID_IsValid(value);
  }
  static const MethodID MethodID_MIN =
    RequestPacket_MethodID_MethodID_MIN;
  static const MethodID MethodID_MAX =
    RequestPacket_MethodID_MethodID_MAX;
  static const int MethodID_ARRAYSIZE =
    RequestPacket_MethodID_MethodID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MethodID_descriptor() {
    return RequestPacket_MethodID_descriptor();
  }
  static inline const ::std::string& MethodID_Name(MethodID value) {
    return RequestPacket_MethodID_Name(value);
  }
  static inline bool MethodID_Parse(const ::std::string& name,
      MethodID* value) {
    return RequestPacket_MethodID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .spider.RequestPacket.MethodID Method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline ::spider::RequestPacket_MethodID method() const;
  inline void set_method(::spider::RequestPacket_MethodID value);

  // optional int32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // optional string clientUUID = 3;
  inline bool has_clientuuid() const;
  inline void clear_clientuuid();
  static const int kClientUUIDFieldNumber = 3;
  inline const ::std::string& clientuuid() const;
  inline void set_clientuuid(const ::std::string& value);
  inline void set_clientuuid(const char* value);
  inline void set_clientuuid(const char* value, size_t size);
  inline ::std::string* mutable_clientuuid();
  inline ::std::string* release_clientuuid();
  inline void set_allocated_clientuuid(::std::string* clientuuid);

  // optional .spider.RequestPacket.CmdPacket Command = 4;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 4;
  inline const ::spider::RequestPacket_CmdPacket& command() const;
  inline ::spider::RequestPacket_CmdPacket* mutable_command();
  inline ::spider::RequestPacket_CmdPacket* release_command();
  inline void set_allocated_command(::spider::RequestPacket_CmdPacket* command);

  // @@protoc_insertion_point(class_scope:spider.RequestPacket)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_clientuuid();
  inline void clear_has_clientuuid();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int method_;
  ::google::protobuf::int32 limit_;
  ::std::string* clientuuid_;
  ::spider::RequestPacket_CmdPacket* command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdPacket_2eproto();
  friend void protobuf_AssignDesc_CmdPacket_2eproto();
  friend void protobuf_ShutdownFile_CmdPacket_2eproto();

  void InitAsDefaultInstance();
  static RequestPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestPacket_CmdPacket

// required string TargetUUID = 1;
inline bool RequestPacket_CmdPacket::has_targetuuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPacket_CmdPacket::set_has_targetuuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPacket_CmdPacket::clear_has_targetuuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPacket_CmdPacket::clear_targetuuid() {
  if (targetuuid_ != &::google::protobuf::internal::kEmptyString) {
    targetuuid_->clear();
  }
  clear_has_targetuuid();
}
inline const ::std::string& RequestPacket_CmdPacket::targetuuid() const {
  return *targetuuid_;
}
inline void RequestPacket_CmdPacket::set_targetuuid(const ::std::string& value) {
  set_has_targetuuid();
  if (targetuuid_ == &::google::protobuf::internal::kEmptyString) {
    targetuuid_ = new ::std::string;
  }
  targetuuid_->assign(value);
}
inline void RequestPacket_CmdPacket::set_targetuuid(const char* value) {
  set_has_targetuuid();
  if (targetuuid_ == &::google::protobuf::internal::kEmptyString) {
    targetuuid_ = new ::std::string;
  }
  targetuuid_->assign(value);
}
inline void RequestPacket_CmdPacket::set_targetuuid(const char* value, size_t size) {
  set_has_targetuuid();
  if (targetuuid_ == &::google::protobuf::internal::kEmptyString) {
    targetuuid_ = new ::std::string;
  }
  targetuuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPacket_CmdPacket::mutable_targetuuid() {
  set_has_targetuuid();
  if (targetuuid_ == &::google::protobuf::internal::kEmptyString) {
    targetuuid_ = new ::std::string;
  }
  return targetuuid_;
}
inline ::std::string* RequestPacket_CmdPacket::release_targetuuid() {
  clear_has_targetuuid();
  if (targetuuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetuuid_;
    targetuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestPacket_CmdPacket::set_allocated_targetuuid(::std::string* targetuuid) {
  if (targetuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetuuid_;
  }
  if (targetuuid) {
    set_has_targetuuid();
    targetuuid_ = targetuuid;
  } else {
    clear_has_targetuuid();
    targetuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Name = 2;
inline bool RequestPacket_CmdPacket::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestPacket_CmdPacket::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestPacket_CmdPacket::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestPacket_CmdPacket::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RequestPacket_CmdPacket::name() const {
  return *name_;
}
inline void RequestPacket_CmdPacket::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestPacket_CmdPacket::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestPacket_CmdPacket::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPacket_CmdPacket::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RequestPacket_CmdPacket::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestPacket_CmdPacket::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Argument = 3;
inline bool RequestPacket_CmdPacket::has_argument() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestPacket_CmdPacket::set_has_argument() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestPacket_CmdPacket::clear_has_argument() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestPacket_CmdPacket::clear_argument() {
  if (argument_ != &::google::protobuf::internal::kEmptyString) {
    argument_->clear();
  }
  clear_has_argument();
}
inline const ::std::string& RequestPacket_CmdPacket::argument() const {
  return *argument_;
}
inline void RequestPacket_CmdPacket::set_argument(const ::std::string& value) {
  set_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    argument_ = new ::std::string;
  }
  argument_->assign(value);
}
inline void RequestPacket_CmdPacket::set_argument(const char* value) {
  set_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    argument_ = new ::std::string;
  }
  argument_->assign(value);
}
inline void RequestPacket_CmdPacket::set_argument(const char* value, size_t size) {
  set_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    argument_ = new ::std::string;
  }
  argument_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPacket_CmdPacket::mutable_argument() {
  set_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    argument_ = new ::std::string;
  }
  return argument_;
}
inline ::std::string* RequestPacket_CmdPacket::release_argument() {
  clear_has_argument();
  if (argument_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = argument_;
    argument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestPacket_CmdPacket::set_allocated_argument(::std::string* argument) {
  if (argument_ != &::google::protobuf::internal::kEmptyString) {
    delete argument_;
  }
  if (argument) {
    set_has_argument();
    argument_ = argument;
  } else {
    clear_has_argument();
    argument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RequestPacket

// required .spider.RequestPacket.MethodID Method = 1;
inline bool RequestPacket::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPacket::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPacket::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPacket::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::spider::RequestPacket_MethodID RequestPacket::method() const {
  return static_cast< ::spider::RequestPacket_MethodID >(method_);
}
inline void RequestPacket::set_method(::spider::RequestPacket_MethodID value) {
  assert(::spider::RequestPacket_MethodID_IsValid(value));
  set_has_method();
  method_ = value;
}

// optional int32 Limit = 2;
inline bool RequestPacket::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestPacket::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestPacket::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestPacket::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 RequestPacket::limit() const {
  return limit_;
}
inline void RequestPacket::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// optional string clientUUID = 3;
inline bool RequestPacket::has_clientuuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestPacket::set_has_clientuuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestPacket::clear_has_clientuuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestPacket::clear_clientuuid() {
  if (clientuuid_ != &::google::protobuf::internal::kEmptyString) {
    clientuuid_->clear();
  }
  clear_has_clientuuid();
}
inline const ::std::string& RequestPacket::clientuuid() const {
  return *clientuuid_;
}
inline void RequestPacket::set_clientuuid(const ::std::string& value) {
  set_has_clientuuid();
  if (clientuuid_ == &::google::protobuf::internal::kEmptyString) {
    clientuuid_ = new ::std::string;
  }
  clientuuid_->assign(value);
}
inline void RequestPacket::set_clientuuid(const char* value) {
  set_has_clientuuid();
  if (clientuuid_ == &::google::protobuf::internal::kEmptyString) {
    clientuuid_ = new ::std::string;
  }
  clientuuid_->assign(value);
}
inline void RequestPacket::set_clientuuid(const char* value, size_t size) {
  set_has_clientuuid();
  if (clientuuid_ == &::google::protobuf::internal::kEmptyString) {
    clientuuid_ = new ::std::string;
  }
  clientuuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPacket::mutable_clientuuid() {
  set_has_clientuuid();
  if (clientuuid_ == &::google::protobuf::internal::kEmptyString) {
    clientuuid_ = new ::std::string;
  }
  return clientuuid_;
}
inline ::std::string* RequestPacket::release_clientuuid() {
  clear_has_clientuuid();
  if (clientuuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientuuid_;
    clientuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestPacket::set_allocated_clientuuid(::std::string* clientuuid) {
  if (clientuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientuuid_;
  }
  if (clientuuid) {
    set_has_clientuuid();
    clientuuid_ = clientuuid;
  } else {
    clear_has_clientuuid();
    clientuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .spider.RequestPacket.CmdPacket Command = 4;
inline bool RequestPacket::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestPacket::set_has_command() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestPacket::clear_has_command() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestPacket::clear_command() {
  if (command_ != NULL) command_->::spider::RequestPacket_CmdPacket::Clear();
  clear_has_command();
}
inline const ::spider::RequestPacket_CmdPacket& RequestPacket::command() const {
  return command_ != NULL ? *command_ : *default_instance_->command_;
}
inline ::spider::RequestPacket_CmdPacket* RequestPacket::mutable_command() {
  set_has_command();
  if (command_ == NULL) command_ = new ::spider::RequestPacket_CmdPacket;
  return command_;
}
inline ::spider::RequestPacket_CmdPacket* RequestPacket::release_command() {
  clear_has_command();
  ::spider::RequestPacket_CmdPacket* temp = command_;
  command_ = NULL;
  return temp;
}
inline void RequestPacket::set_allocated_command(::spider::RequestPacket_CmdPacket* command) {
  delete command_;
  command_ = command;
  if (command) {
    set_has_command();
  } else {
    clear_has_command();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace spider

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::spider::RequestPacket_MethodID>() {
  return ::spider::RequestPacket_MethodID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CmdPacket_2eproto__INCLUDED
