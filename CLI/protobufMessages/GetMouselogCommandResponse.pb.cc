// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/GetMouselogCommandResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Proto/GetMouselogCommandResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GetMouselogCommandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMouselogCommandResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Proto_2fGetMouselogCommandResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Proto_2fGetMouselogCommandResponse_2eproto() {
  protobuf_AddDesc_Proto_2fGetMouselogCommandResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Proto/GetMouselogCommandResponse.proto");
  GOOGLE_CHECK(file != NULL);
  GetMouselogCommandResponse_descriptor_ = file->message_type(0);
  static const int GetMouselogCommandResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMouselogCommandResponse, keylog_),
  };
  GetMouselogCommandResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMouselogCommandResponse_descriptor_,
      GetMouselogCommandResponse::internal_default_instance(),
      GetMouselogCommandResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetMouselogCommandResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMouselogCommandResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Proto_2fGetMouselogCommandResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMouselogCommandResponse_descriptor_, GetMouselogCommandResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Proto_2fGetMouselogCommandResponse_2eproto() {
  GetMouselogCommandResponse_default_instance_.Shutdown();
  delete GetMouselogCommandResponse_reflection_;
}

void protobuf_InitDefaults_Proto_2fGetMouselogCommandResponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto();
  GetMouselogCommandResponse_default_instance_.DefaultConstruct();
  GetMouselogCommandResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Proto_2fGetMouselogCommandResponse_2eproto_once_);
void protobuf_InitDefaults_Proto_2fGetMouselogCommandResponse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Proto_2fGetMouselogCommandResponse_2eproto_once_,
                 &protobuf_InitDefaults_Proto_2fGetMouselogCommandResponse_2eproto_impl);
}
void protobuf_AddDesc_Proto_2fGetMouselogCommandResponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Proto_2fGetMouselogCommandResponse_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&Proto/GetMouselogCommandResponse.proto"
    "\032\034Proto/SpiderMouseEvent.proto\"\?\n\032GetMou"
    "selogCommandResponse\022!\n\006keylog\030\001 \003(\0132\021.S"
    "piderMouseEventb\006proto3", 143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Proto/GetMouselogCommandResponse.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Proto_2fGetMouselogCommandResponse_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Proto_2fGetMouselogCommandResponse_2eproto_once_);
void protobuf_AddDesc_Proto_2fGetMouselogCommandResponse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Proto_2fGetMouselogCommandResponse_2eproto_once_,
                 &protobuf_AddDesc_Proto_2fGetMouselogCommandResponse_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Proto_2fGetMouselogCommandResponse_2eproto {
  StaticDescriptorInitializer_Proto_2fGetMouselogCommandResponse_2eproto() {
    protobuf_AddDesc_Proto_2fGetMouselogCommandResponse_2eproto();
  }
} static_descriptor_initializer_Proto_2fGetMouselogCommandResponse_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMouselogCommandResponse::kKeylogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMouselogCommandResponse::GetMouselogCommandResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fGetMouselogCommandResponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetMouselogCommandResponse)
}

void GetMouselogCommandResponse::InitAsDefaultInstance() {
}

GetMouselogCommandResponse::GetMouselogCommandResponse(const GetMouselogCommandResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetMouselogCommandResponse)
}

void GetMouselogCommandResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetMouselogCommandResponse::~GetMouselogCommandResponse() {
  // @@protoc_insertion_point(destructor:GetMouselogCommandResponse)
  SharedDtor();
}

void GetMouselogCommandResponse::SharedDtor() {
}

void GetMouselogCommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMouselogCommandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMouselogCommandResponse_descriptor_;
}

const GetMouselogCommandResponse& GetMouselogCommandResponse::default_instance() {
  protobuf_InitDefaults_Proto_2fGetMouselogCommandResponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetMouselogCommandResponse> GetMouselogCommandResponse_default_instance_;

GetMouselogCommandResponse* GetMouselogCommandResponse::New(::google::protobuf::Arena* arena) const {
  GetMouselogCommandResponse* n = new GetMouselogCommandResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMouselogCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetMouselogCommandResponse)
  keylog_.Clear();
}

bool GetMouselogCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetMouselogCommandResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SpiderMouseEvent keylog = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keylog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keylog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keylog;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetMouselogCommandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetMouselogCommandResponse)
  return false;
#undef DO_
}

void GetMouselogCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetMouselogCommandResponse)
  // repeated .SpiderMouseEvent keylog = 1;
  for (unsigned int i = 0, n = this->keylog_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keylog(i), output);
  }

  // @@protoc_insertion_point(serialize_end:GetMouselogCommandResponse)
}

::google::protobuf::uint8* GetMouselogCommandResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetMouselogCommandResponse)
  // repeated .SpiderMouseEvent keylog = 1;
  for (unsigned int i = 0, n = this->keylog_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keylog(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GetMouselogCommandResponse)
  return target;
}

size_t GetMouselogCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetMouselogCommandResponse)
  size_t total_size = 0;

  // repeated .SpiderMouseEvent keylog = 1;
  {
    unsigned int count = this->keylog_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keylog(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMouselogCommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetMouselogCommandResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetMouselogCommandResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMouselogCommandResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetMouselogCommandResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetMouselogCommandResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetMouselogCommandResponse::MergeFrom(const GetMouselogCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetMouselogCommandResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetMouselogCommandResponse::UnsafeMergeFrom(const GetMouselogCommandResponse& from) {
  GOOGLE_DCHECK(&from != this);
  keylog_.MergeFrom(from.keylog_);
}

void GetMouselogCommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetMouselogCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMouselogCommandResponse::CopyFrom(const GetMouselogCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetMouselogCommandResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetMouselogCommandResponse::IsInitialized() const {

  return true;
}

void GetMouselogCommandResponse::Swap(GetMouselogCommandResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMouselogCommandResponse::InternalSwap(GetMouselogCommandResponse* other) {
  keylog_.UnsafeArenaSwap(&other->keylog_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMouselogCommandResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMouselogCommandResponse_descriptor_;
  metadata.reflection = GetMouselogCommandResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMouselogCommandResponse

// repeated .SpiderMouseEvent keylog = 1;
int GetMouselogCommandResponse::keylog_size() const {
  return keylog_.size();
}
void GetMouselogCommandResponse::clear_keylog() {
  keylog_.Clear();
}
const ::SpiderMouseEvent& GetMouselogCommandResponse::keylog(int index) const {
  // @@protoc_insertion_point(field_get:GetMouselogCommandResponse.keylog)
  return keylog_.Get(index);
}
::SpiderMouseEvent* GetMouselogCommandResponse::mutable_keylog(int index) {
  // @@protoc_insertion_point(field_mutable:GetMouselogCommandResponse.keylog)
  return keylog_.Mutable(index);
}
::SpiderMouseEvent* GetMouselogCommandResponse::add_keylog() {
  // @@protoc_insertion_point(field_add:GetMouselogCommandResponse.keylog)
  return keylog_.Add();
}
::google::protobuf::RepeatedPtrField< ::SpiderMouseEvent >*
GetMouselogCommandResponse::mutable_keylog() {
  // @@protoc_insertion_point(field_mutable_list:GetMouselogCommandResponse.keylog)
  return &keylog_;
}
const ::google::protobuf::RepeatedPtrField< ::SpiderMouseEvent >&
GetMouselogCommandResponse::keylog() const {
  // @@protoc_insertion_point(field_list:GetMouselogCommandResponse.keylog)
  return keylog_;
}

inline const GetMouselogCommandResponse* GetMouselogCommandResponse::internal_default_instance() {
  return &GetMouselogCommandResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
