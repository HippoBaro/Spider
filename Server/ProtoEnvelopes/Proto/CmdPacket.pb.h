// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/CmdPacket.proto

#ifndef PROTOBUF_Proto_2fCmdPacket_2eproto__INCLUDED
#define PROTOBUF_Proto_2fCmdPacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Proto_2fCmdPacket_2eproto();
void protobuf_InitDefaults_Proto_2fCmdPacket_2eproto();
void protobuf_AssignDesc_Proto_2fCmdPacket_2eproto();
void protobuf_ShutdownFile_Proto_2fCmdPacket_2eproto();

class CmdPacket;

// ===================================================================

class CmdPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CmdPacket) */ {
 public:
  CmdPacket();
  virtual ~CmdPacket();

  CmdPacket(const CmdPacket& from);

  inline CmdPacket& operator=(const CmdPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdPacket& default_instance();

  static const CmdPacket* internal_default_instance();

  void Swap(CmdPacket* other);

  // implements Message ----------------------------------------------

  inline CmdPacket* New() const { return New(NULL); }

  CmdPacket* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdPacket& from);
  void MergeFrom(const CmdPacket& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdPacket* other);
  void UnsafeMergeFrom(const CmdPacket& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TargetUUID = 1;
  void clear_targetuuid();
  static const int kTargetUUIDFieldNumber = 1;
  const ::std::string& targetuuid() const;
  void set_targetuuid(const ::std::string& value);
  void set_targetuuid(const char* value);
  void set_targetuuid(const char* value, size_t size);
  ::std::string* mutable_targetuuid();
  ::std::string* release_targetuuid();
  void set_allocated_targetuuid(::std::string* targetuuid);

  // optional string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes Argument = 3;
  void clear_argument();
  static const int kArgumentFieldNumber = 3;
  const ::std::string& argument() const;
  void set_argument(const ::std::string& value);
  void set_argument(const char* value);
  void set_argument(const void* value, size_t size);
  ::std::string* mutable_argument();
  ::std::string* release_argument();
  void set_allocated_argument(::std::string* argument);

  // @@protoc_insertion_point(class_scope:CmdPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr targetuuid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr argument_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_Proto_2fCmdPacket_2eproto_impl();
  friend void  protobuf_AddDesc_Proto_2fCmdPacket_2eproto_impl();
  friend void protobuf_AssignDesc_Proto_2fCmdPacket_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fCmdPacket_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CmdPacket> CmdPacket_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdPacket

// optional string TargetUUID = 1;
inline void CmdPacket::clear_targetuuid() {
  targetuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdPacket::targetuuid() const {
  // @@protoc_insertion_point(field_get:CmdPacket.TargetUUID)
  return targetuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdPacket::set_targetuuid(const ::std::string& value) {
  
  targetuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CmdPacket.TargetUUID)
}
inline void CmdPacket::set_targetuuid(const char* value) {
  
  targetuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CmdPacket.TargetUUID)
}
inline void CmdPacket::set_targetuuid(const char* value, size_t size) {
  
  targetuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CmdPacket.TargetUUID)
}
inline ::std::string* CmdPacket::mutable_targetuuid() {
  
  // @@protoc_insertion_point(field_mutable:CmdPacket.TargetUUID)
  return targetuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdPacket::release_targetuuid() {
  // @@protoc_insertion_point(field_release:CmdPacket.TargetUUID)
  
  return targetuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdPacket::set_allocated_targetuuid(::std::string* targetuuid) {
  if (targetuuid != NULL) {
    
  } else {
    
  }
  targetuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetuuid);
  // @@protoc_insertion_point(field_set_allocated:CmdPacket.TargetUUID)
}

// optional string Name = 2;
inline void CmdPacket::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdPacket::name() const {
  // @@protoc_insertion_point(field_get:CmdPacket.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdPacket::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CmdPacket.Name)
}
inline void CmdPacket::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CmdPacket.Name)
}
inline void CmdPacket::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CmdPacket.Name)
}
inline ::std::string* CmdPacket::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CmdPacket.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdPacket::release_name() {
  // @@protoc_insertion_point(field_release:CmdPacket.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdPacket::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CmdPacket.Name)
}

// optional bytes Argument = 3;
inline void CmdPacket::clear_argument() {
  argument_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CmdPacket::argument() const {
  // @@protoc_insertion_point(field_get:CmdPacket.Argument)
  return argument_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdPacket::set_argument(const ::std::string& value) {
  
  argument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CmdPacket.Argument)
}
inline void CmdPacket::set_argument(const char* value) {
  
  argument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CmdPacket.Argument)
}
inline void CmdPacket::set_argument(const void* value, size_t size) {
  
  argument_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CmdPacket.Argument)
}
inline ::std::string* CmdPacket::mutable_argument() {
  
  // @@protoc_insertion_point(field_mutable:CmdPacket.Argument)
  return argument_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CmdPacket::release_argument() {
  // @@protoc_insertion_point(field_release:CmdPacket.Argument)
  
  return argument_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdPacket::set_allocated_argument(::std::string* argument) {
  if (argument != NULL) {
    
  } else {
    
  }
  argument_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), argument);
  // @@protoc_insertion_point(field_set_allocated:CmdPacket.Argument)
}

inline const CmdPacket* CmdPacket::internal_default_instance() {
  return &CmdPacket_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Proto_2fCmdPacket_2eproto__INCLUDED
