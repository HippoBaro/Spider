// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/SpiderResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpiderResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SpiderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiderResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Proto_2fSpiderResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Proto_2fSpiderResponse_2eproto() {
  protobuf_AddDesc_Proto_2fSpiderResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Proto/SpiderResponse.proto");
  GOOGLE_CHECK(file != NULL);
  SpiderResponse_descriptor_ = file->message_type(0);
  static const int SpiderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderResponse, enveloppe_),
  };
  SpiderResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpiderResponse_descriptor_,
      SpiderResponse::internal_default_instance(),
      SpiderResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpiderResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Proto_2fSpiderResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpiderResponse_descriptor_, SpiderResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Proto_2fSpiderResponse_2eproto() {
  SpiderResponse_default_instance_.Shutdown();
  delete SpiderResponse_reflection_;
}

void protobuf_InitDefaults_Proto_2fSpiderResponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_Proto_2fSpiderEnveloppe_2eproto();
  SpiderResponse_default_instance_.DefaultConstruct();
  SpiderResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Proto_2fSpiderResponse_2eproto_once_);
void protobuf_InitDefaults_Proto_2fSpiderResponse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Proto_2fSpiderResponse_2eproto_once_,
                 &protobuf_InitDefaults_Proto_2fSpiderResponse_2eproto_impl);
}
void protobuf_AddDesc_Proto_2fSpiderResponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Proto_2fSpiderResponse_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Proto/SpiderResponse.proto\032\033Proto/Spid"
    "erEnveloppe.proto\"5\n\016SpiderResponse\022#\n\te"
    "nveloppe\030\001 \001(\0132\020.SpiderEnveloppeb\006proto3", 120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Proto/SpiderResponse.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_Proto_2fSpiderEnveloppe_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Proto_2fSpiderResponse_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Proto_2fSpiderResponse_2eproto_once_);
void protobuf_AddDesc_Proto_2fSpiderResponse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Proto_2fSpiderResponse_2eproto_once_,
                 &protobuf_AddDesc_Proto_2fSpiderResponse_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Proto_2fSpiderResponse_2eproto {
  StaticDescriptorInitializer_Proto_2fSpiderResponse_2eproto() {
    protobuf_AddDesc_Proto_2fSpiderResponse_2eproto();
  }
} static_descriptor_initializer_Proto_2fSpiderResponse_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiderResponse::kEnveloppeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiderResponse::SpiderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderResponse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiderResponse)
}

void SpiderResponse::InitAsDefaultInstance() {
  enveloppe_ = const_cast< ::SpiderEnveloppe*>(
      ::SpiderEnveloppe::internal_default_instance());
}

SpiderResponse::SpiderResponse(const SpiderResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiderResponse)
}

void SpiderResponse::SharedCtor() {
  enveloppe_ = NULL;
  _cached_size_ = 0;
}

SpiderResponse::~SpiderResponse() {
  // @@protoc_insertion_point(destructor:SpiderResponse)
  SharedDtor();
}

void SpiderResponse::SharedDtor() {
  if (this != &SpiderResponse_default_instance_.get()) {
    delete enveloppe_;
  }
}

void SpiderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiderResponse_descriptor_;
}

const SpiderResponse& SpiderResponse::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderResponse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SpiderResponse> SpiderResponse_default_instance_;

SpiderResponse* SpiderResponse::New(::google::protobuf::Arena* arena) const {
  SpiderResponse* n = new SpiderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpiderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SpiderResponse)
  if (GetArenaNoVirtual() == NULL && enveloppe_ != NULL) delete enveloppe_;
  enveloppe_ = NULL;
}

bool SpiderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SpiderEnveloppe enveloppe = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enveloppe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiderResponse)
  return false;
#undef DO_
}

void SpiderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiderResponse)
  // optional .SpiderEnveloppe enveloppe = 1;
  if (this->has_enveloppe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->enveloppe_, output);
  }

  // @@protoc_insertion_point(serialize_end:SpiderResponse)
}

::google::protobuf::uint8* SpiderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SpiderResponse)
  // optional .SpiderEnveloppe enveloppe = 1;
  if (this->has_enveloppe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->enveloppe_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SpiderResponse)
  return target;
}

size_t SpiderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpiderResponse)
  size_t total_size = 0;

  // optional .SpiderEnveloppe enveloppe = 1;
  if (this->has_enveloppe()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enveloppe_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpiderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SpiderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpiderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpiderResponse)
    UnsafeMergeFrom(*source);
  }
}

void SpiderResponse::MergeFrom(const SpiderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpiderResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SpiderResponse::UnsafeMergeFrom(const SpiderResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_enveloppe()) {
    mutable_enveloppe()->::SpiderEnveloppe::MergeFrom(from.enveloppe());
  }
}

void SpiderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpiderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiderResponse::CopyFrom(const SpiderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpiderResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SpiderResponse::IsInitialized() const {

  return true;
}

void SpiderResponse::Swap(SpiderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiderResponse::InternalSwap(SpiderResponse* other) {
  std::swap(enveloppe_, other->enveloppe_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpiderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiderResponse_descriptor_;
  metadata.reflection = SpiderResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpiderResponse

// optional .SpiderEnveloppe enveloppe = 1;
bool SpiderResponse::has_enveloppe() const {
  return this != internal_default_instance() && enveloppe_ != NULL;
}
void SpiderResponse::clear_enveloppe() {
  if (GetArenaNoVirtual() == NULL && enveloppe_ != NULL) delete enveloppe_;
  enveloppe_ = NULL;
}
const ::SpiderEnveloppe& SpiderResponse::enveloppe() const {
  // @@protoc_insertion_point(field_get:SpiderResponse.enveloppe)
  return enveloppe_ != NULL ? *enveloppe_
                         : *::SpiderEnveloppe::internal_default_instance();
}
::SpiderEnveloppe* SpiderResponse::mutable_enveloppe() {
  
  if (enveloppe_ == NULL) {
    enveloppe_ = new ::SpiderEnveloppe;
  }
  // @@protoc_insertion_point(field_mutable:SpiderResponse.enveloppe)
  return enveloppe_;
}
::SpiderEnveloppe* SpiderResponse::release_enveloppe() {
  // @@protoc_insertion_point(field_release:SpiderResponse.enveloppe)
  
  ::SpiderEnveloppe* temp = enveloppe_;
  enveloppe_ = NULL;
  return temp;
}
void SpiderResponse::set_allocated_enveloppe(::SpiderEnveloppe* enveloppe) {
  delete enveloppe_;
  enveloppe_ = enveloppe;
  if (enveloppe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SpiderResponse.enveloppe)
}

inline const SpiderResponse* SpiderResponse::internal_default_instance() {
  return &SpiderResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
