// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpiderEnvelop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpiderEnvelop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SpiderEnveloppe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiderEnveloppe_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SpiderEnvelop_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SpiderEnvelop_2eproto() {
  protobuf_AddDesc_SpiderEnvelop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SpiderEnvelop.proto");
  GOOGLE_CHECK(file != NULL);
  SpiderEnveloppe_descriptor_ = file->message_type(0);
  static const int SpiderEnveloppe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderEnveloppe, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderEnveloppe, payloadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderEnveloppe, payload_),
  };
  SpiderEnveloppe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpiderEnveloppe_descriptor_,
      SpiderEnveloppe::default_instance_,
      SpiderEnveloppe_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpiderEnveloppe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderEnveloppe, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderEnveloppe, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SpiderEnvelop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpiderEnveloppe_descriptor_, &SpiderEnveloppe::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SpiderEnvelop_2eproto() {
  delete SpiderEnveloppe::default_instance_;
  delete SpiderEnveloppe_reflection_;
}

void protobuf_AddDesc_SpiderEnvelop_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_SpiderEnvelop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023SpiderEnvelop.proto\032\031google/protobuf/a"
    "ny.proto\"_\n\017SpiderEnveloppe\022\020\n\010ClientID\030"
    "\001 \001(\t\022\023\n\013PayloadType\030\002 \001(\t\022%\n\007Payload\030\003 "
    "\001(\0132\024.google.protobuf.Anyb\006proto3", 153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SpiderEnvelop.proto", &protobuf_RegisterTypes);
  SpiderEnveloppe::default_instance_ = new SpiderEnveloppe();
  SpiderEnveloppe::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SpiderEnvelop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SpiderEnvelop_2eproto {
  StaticDescriptorInitializer_SpiderEnvelop_2eproto() {
    protobuf_AddDesc_SpiderEnvelop_2eproto();
  }
} static_descriptor_initializer_SpiderEnvelop_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiderEnveloppe::kClientIDFieldNumber;
const int SpiderEnveloppe::kPayloadTypeFieldNumber;
const int SpiderEnveloppe::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiderEnveloppe::SpiderEnveloppe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiderEnveloppe)
}

void SpiderEnveloppe::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  payload_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

SpiderEnveloppe::SpiderEnveloppe(const SpiderEnveloppe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiderEnveloppe)
}

void SpiderEnveloppe::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payloadtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_ = NULL;
}

SpiderEnveloppe::~SpiderEnveloppe() {
  // @@protoc_insertion_point(destructor:SpiderEnveloppe)
  SharedDtor();
}

void SpiderEnveloppe::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payloadtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete payload_;
  }
}

void SpiderEnveloppe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiderEnveloppe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiderEnveloppe_descriptor_;
}

const SpiderEnveloppe& SpiderEnveloppe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SpiderEnvelop_2eproto();
  return *default_instance_;
}

SpiderEnveloppe* SpiderEnveloppe::default_instance_ = NULL;

SpiderEnveloppe* SpiderEnveloppe::New(::google::protobuf::Arena* arena) const {
  SpiderEnveloppe* n = new SpiderEnveloppe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpiderEnveloppe::Clear() {
// @@protoc_insertion_point(message_clear_start:SpiderEnveloppe)
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payloadtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}

bool SpiderEnveloppe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiderEnveloppe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ClientID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpiderEnveloppe.ClientID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PayloadType;
        break;
      }

      // optional string PayloadType = 2;
      case 2: {
        if (tag == 18) {
         parse_PayloadType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payloadtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payloadtype().data(), this->payloadtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpiderEnveloppe.PayloadType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Payload;
        break;
      }

      // optional .google.protobuf.Any Payload = 3;
      case 3: {
        if (tag == 26) {
         parse_Payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiderEnveloppe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiderEnveloppe)
  return false;
#undef DO_
}

void SpiderEnveloppe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiderEnveloppe)
  // optional string ClientID = 1;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpiderEnveloppe.ClientID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // optional string PayloadType = 2;
  if (this->payloadtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payloadtype().data(), this->payloadtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpiderEnveloppe.PayloadType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->payloadtype(), output);
  }

  // optional .google.protobuf.Any Payload = 3;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->payload_, output);
  }

  // @@protoc_insertion_point(serialize_end:SpiderEnveloppe)
}

::google::protobuf::uint8* SpiderEnveloppe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpiderEnveloppe)
  // optional string ClientID = 1;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpiderEnveloppe.ClientID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // optional string PayloadType = 2;
  if (this->payloadtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payloadtype().data(), this->payloadtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpiderEnveloppe.PayloadType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->payloadtype(), target);
  }

  // optional .google.protobuf.Any Payload = 3;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->payload_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SpiderEnveloppe)
  return target;
}

int SpiderEnveloppe::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SpiderEnveloppe)
  int total_size = 0;

  // optional string ClientID = 1;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  // optional string PayloadType = 2;
  if (this->payloadtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payloadtype());
  }

  // optional .google.protobuf.Any Payload = 3;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiderEnveloppe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpiderEnveloppe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpiderEnveloppe* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiderEnveloppe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpiderEnveloppe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpiderEnveloppe)
    MergeFrom(*source);
  }
}

void SpiderEnveloppe::MergeFrom(const SpiderEnveloppe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpiderEnveloppe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.payloadtype().size() > 0) {

    payloadtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payloadtype_);
  }
  if (from.has_payload()) {
    mutable_payload()->::google::protobuf::Any::MergeFrom(from.payload());
  }
}

void SpiderEnveloppe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpiderEnveloppe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiderEnveloppe::CopyFrom(const SpiderEnveloppe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpiderEnveloppe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiderEnveloppe::IsInitialized() const {

  return true;
}

void SpiderEnveloppe::Swap(SpiderEnveloppe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiderEnveloppe::InternalSwap(SpiderEnveloppe* other) {
  clientid_.Swap(&other->clientid_);
  payloadtype_.Swap(&other->payloadtype_);
  std::swap(payload_, other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpiderEnveloppe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiderEnveloppe_descriptor_;
  metadata.reflection = SpiderEnveloppe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpiderEnveloppe

// optional string ClientID = 1;
void SpiderEnveloppe::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SpiderEnveloppe::clientid() const {
  // @@protoc_insertion_point(field_get:SpiderEnveloppe.ClientID)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpiderEnveloppe::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SpiderEnveloppe.ClientID)
}
 void SpiderEnveloppe::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpiderEnveloppe.ClientID)
}
 void SpiderEnveloppe::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpiderEnveloppe.ClientID)
}
 ::std::string* SpiderEnveloppe::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:SpiderEnveloppe.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SpiderEnveloppe::release_clientid() {
  // @@protoc_insertion_point(field_release:SpiderEnveloppe.ClientID)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpiderEnveloppe::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:SpiderEnveloppe.ClientID)
}

// optional string PayloadType = 2;
void SpiderEnveloppe::clear_payloadtype() {
  payloadtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SpiderEnveloppe::payloadtype() const {
  // @@protoc_insertion_point(field_get:SpiderEnveloppe.PayloadType)
  return payloadtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpiderEnveloppe::set_payloadtype(const ::std::string& value) {
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SpiderEnveloppe.PayloadType)
}
 void SpiderEnveloppe::set_payloadtype(const char* value) {
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpiderEnveloppe.PayloadType)
}
 void SpiderEnveloppe::set_payloadtype(const char* value, size_t size) {
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpiderEnveloppe.PayloadType)
}
 ::std::string* SpiderEnveloppe::mutable_payloadtype() {
  
  // @@protoc_insertion_point(field_mutable:SpiderEnveloppe.PayloadType)
  return payloadtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SpiderEnveloppe::release_payloadtype() {
  // @@protoc_insertion_point(field_release:SpiderEnveloppe.PayloadType)
  
  return payloadtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SpiderEnveloppe::set_allocated_payloadtype(::std::string* payloadtype) {
  if (payloadtype != NULL) {
    
  } else {
    
  }
  payloadtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payloadtype);
  // @@protoc_insertion_point(field_set_allocated:SpiderEnveloppe.PayloadType)
}

// optional .google.protobuf.Any Payload = 3;
bool SpiderEnveloppe::has_payload() const {
  return !_is_default_instance_ && payload_ != NULL;
}
void SpiderEnveloppe::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
const ::google::protobuf::Any& SpiderEnveloppe::payload() const {
  // @@protoc_insertion_point(field_get:SpiderEnveloppe.Payload)
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
::google::protobuf::Any* SpiderEnveloppe::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:SpiderEnveloppe.Payload)
  return payload_;
}
::google::protobuf::Any* SpiderEnveloppe::release_payload() {
  // @@protoc_insertion_point(field_release:SpiderEnveloppe.Payload)
  
  ::google::protobuf::Any* temp = payload_;
  payload_ = NULL;
  return temp;
}
void SpiderEnveloppe::set_allocated_payload(::google::protobuf::Any* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SpiderEnveloppe.Payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
