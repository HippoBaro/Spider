// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/SpiderKeyLoggingPayload.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpiderKeyLoggingPayload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SpiderKeyLoggingPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiderKeyLoggingPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Proto_2fSpiderKeyLoggingPayload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Proto_2fSpiderKeyLoggingPayload_2eproto() {
  protobuf_AddDesc_Proto_2fSpiderKeyLoggingPayload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Proto/SpiderKeyLoggingPayload.proto");
  GOOGLE_CHECK(file != NULL);
  SpiderKeyLoggingPayload_descriptor_ = file->message_type(0);
  static const int SpiderKeyLoggingPayload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderKeyLoggingPayload, plaintextkeylog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderKeyLoggingPayload, context_),
  };
  SpiderKeyLoggingPayload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpiderKeyLoggingPayload_descriptor_,
      SpiderKeyLoggingPayload::internal_default_instance(),
      SpiderKeyLoggingPayload_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpiderKeyLoggingPayload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderKeyLoggingPayload, _internal_metadata_));
  SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_descriptor_ = SpiderKeyLoggingPayload_descriptor_->nested_type(0);
  static const int SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload, windowsname_),
  };
  SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_descriptor_,
      SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::internal_default_instance(),
      SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Proto_2fSpiderKeyLoggingPayload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpiderKeyLoggingPayload_descriptor_, SpiderKeyLoggingPayload::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_descriptor_, SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Proto_2fSpiderKeyLoggingPayload_2eproto() {
  SpiderKeyLoggingPayload_default_instance_.Shutdown();
  delete SpiderKeyLoggingPayload_reflection_;
  SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_default_instance_.Shutdown();
  delete SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_reflection_;
}

void protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  SpiderKeyLoggingPayload_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_default_instance_.DefaultConstruct();
  SpiderKeyLoggingPayload_default_instance_.get_mutable()->InitAsDefaultInstance();
  SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto_once_);
void protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto_once_,
                 &protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto_impl);
}
void protobuf_AddDesc_Proto_2fSpiderKeyLoggingPayload_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#Proto/SpiderKeyLoggingPayload.proto\"\310\001"
    "\n\027SpiderKeyLoggingPayload\022\027\n\017PlaintextKe"
    "ylog\030\001 \001(\014\022H\n\007Context\030\002 \001(\01327.SpiderKeyL"
    "oggingPayload.SpiderKeyLoggingContextPay"
    "load\032J\n\036SpiderKeyLoggingContextPayload\022\023"
    "\n\013ProcessName\030\001 \001(\t\022\023\n\013WindowsName\030\002 \001(\t"
    "b\006proto3", 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Proto/SpiderKeyLoggingPayload.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Proto_2fSpiderKeyLoggingPayload_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Proto_2fSpiderKeyLoggingPayload_2eproto_once_);
void protobuf_AddDesc_Proto_2fSpiderKeyLoggingPayload_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Proto_2fSpiderKeyLoggingPayload_2eproto_once_,
                 &protobuf_AddDesc_Proto_2fSpiderKeyLoggingPayload_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Proto_2fSpiderKeyLoggingPayload_2eproto {
  StaticDescriptorInitializer_Proto_2fSpiderKeyLoggingPayload_2eproto() {
    protobuf_AddDesc_Proto_2fSpiderKeyLoggingPayload_2eproto();
  }
} static_descriptor_initializer_Proto_2fSpiderKeyLoggingPayload_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::kProcessNameFieldNumber;
const int SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::kWindowsNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::InitAsDefaultInstance() {
}

SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload(const SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::SharedCtor() {
  processname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  windowsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::~SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload() {
  // @@protoc_insertion_point(destructor:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  SharedDtor();
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::SharedDtor() {
  processname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  windowsname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_descriptor_;
}

const SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload& SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload> SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_default_instance_;

SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::New(::google::protobuf::Arena* arena) const {
  SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* n = new SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  processname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  windowsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProcessName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_WindowsName;
        break;
      }

      // optional string WindowsName = 2;
      case 2: {
        if (tag == 18) {
         parse_WindowsName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windowsname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->windowsname().data(), this->windowsname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  return false;
#undef DO_
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  // optional string ProcessName = 1;
  if (this->processname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->processname(), output);
  }

  // optional string WindowsName = 2;
  if (this->windowsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->windowsname().data(), this->windowsname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->windowsname(), output);
  }

  // @@protoc_insertion_point(serialize_end:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
}

::google::protobuf::uint8* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  // optional string ProcessName = 1;
  if (this->processname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->processname(), target);
  }

  // optional string WindowsName = 2;
  if (this->windowsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->windowsname().data(), this->windowsname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->windowsname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  return target;
}

size_t SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  size_t total_size = 0;

  // optional string ProcessName = 1;
  if (this->processname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processname());
  }

  // optional string WindowsName = 2;
  if (this->windowsname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->windowsname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
    UnsafeMergeFrom(*source);
  }
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::MergeFrom(const SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::UnsafeMergeFrom(const SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.processname().size() > 0) {

    processname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processname_);
  }
  if (from.windowsname().size() > 0) {

    windowsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.windowsname_);
  }
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::CopyFrom(const SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::IsInitialized() const {

  return true;
}

void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::Swap(SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::InternalSwap(SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* other) {
  processname_.Swap(&other->processname_);
  windowsname_.Swap(&other->windowsname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_descriptor_;
  metadata.reflection = SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiderKeyLoggingPayload::kPlaintextKeylogFieldNumber;
const int SpiderKeyLoggingPayload::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiderKeyLoggingPayload::SpiderKeyLoggingPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpiderKeyLoggingPayload)
}

void SpiderKeyLoggingPayload::InitAsDefaultInstance() {
  context_ = const_cast< ::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload*>(
      ::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::internal_default_instance());
}

SpiderKeyLoggingPayload::SpiderKeyLoggingPayload(const SpiderKeyLoggingPayload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SpiderKeyLoggingPayload)
}

void SpiderKeyLoggingPayload::SharedCtor() {
  plaintextkeylog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

SpiderKeyLoggingPayload::~SpiderKeyLoggingPayload() {
  // @@protoc_insertion_point(destructor:SpiderKeyLoggingPayload)
  SharedDtor();
}

void SpiderKeyLoggingPayload::SharedDtor() {
  plaintextkeylog_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &SpiderKeyLoggingPayload_default_instance_.get()) {
    delete context_;
  }
}

void SpiderKeyLoggingPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiderKeyLoggingPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiderKeyLoggingPayload_descriptor_;
}

const SpiderKeyLoggingPayload& SpiderKeyLoggingPayload::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderKeyLoggingPayload_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SpiderKeyLoggingPayload> SpiderKeyLoggingPayload_default_instance_;

SpiderKeyLoggingPayload* SpiderKeyLoggingPayload::New(::google::protobuf::Arena* arena) const {
  SpiderKeyLoggingPayload* n = new SpiderKeyLoggingPayload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpiderKeyLoggingPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:SpiderKeyLoggingPayload)
  plaintextkeylog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}

bool SpiderKeyLoggingPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpiderKeyLoggingPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes PlaintextKeylog = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_plaintextkeylog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Context;
        break;
      }

      // optional .SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload Context = 2;
      case 2: {
        if (tag == 18) {
         parse_Context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpiderKeyLoggingPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpiderKeyLoggingPayload)
  return false;
#undef DO_
}

void SpiderKeyLoggingPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpiderKeyLoggingPayload)
  // optional bytes PlaintextKeylog = 1;
  if (this->plaintextkeylog().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->plaintextkeylog(), output);
  }

  // optional .SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload Context = 2;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->context_, output);
  }

  // @@protoc_insertion_point(serialize_end:SpiderKeyLoggingPayload)
}

::google::protobuf::uint8* SpiderKeyLoggingPayload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SpiderKeyLoggingPayload)
  // optional bytes PlaintextKeylog = 1;
  if (this->plaintextkeylog().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->plaintextkeylog(), target);
  }

  // optional .SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload Context = 2;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->context_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SpiderKeyLoggingPayload)
  return target;
}

size_t SpiderKeyLoggingPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpiderKeyLoggingPayload)
  size_t total_size = 0;

  // optional bytes PlaintextKeylog = 1;
  if (this->plaintextkeylog().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->plaintextkeylog());
  }

  // optional .SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload Context = 2;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiderKeyLoggingPayload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpiderKeyLoggingPayload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SpiderKeyLoggingPayload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiderKeyLoggingPayload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpiderKeyLoggingPayload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpiderKeyLoggingPayload)
    UnsafeMergeFrom(*source);
  }
}

void SpiderKeyLoggingPayload::MergeFrom(const SpiderKeyLoggingPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpiderKeyLoggingPayload)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SpiderKeyLoggingPayload::UnsafeMergeFrom(const SpiderKeyLoggingPayload& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.plaintextkeylog().size() > 0) {

    plaintextkeylog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plaintextkeylog_);
  }
  if (from.has_context()) {
    mutable_context()->::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::MergeFrom(from.context());
  }
}

void SpiderKeyLoggingPayload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpiderKeyLoggingPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiderKeyLoggingPayload::CopyFrom(const SpiderKeyLoggingPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpiderKeyLoggingPayload)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SpiderKeyLoggingPayload::IsInitialized() const {

  return true;
}

void SpiderKeyLoggingPayload::Swap(SpiderKeyLoggingPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiderKeyLoggingPayload::InternalSwap(SpiderKeyLoggingPayload* other) {
  plaintextkeylog_.Swap(&other->plaintextkeylog_);
  std::swap(context_, other->context_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpiderKeyLoggingPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiderKeyLoggingPayload_descriptor_;
  metadata.reflection = SpiderKeyLoggingPayload_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload

// optional string ProcessName = 1;
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::clear_processname() {
  processname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::processname() const {
  // @@protoc_insertion_point(field_get:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName)
  return processname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::set_processname(const ::std::string& value) {
  
  processname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName)
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::set_processname(const char* value) {
  
  processname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName)
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::set_processname(const char* value, size_t size) {
  
  processname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName)
}
::std::string* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::mutable_processname() {
  
  // @@protoc_insertion_point(field_mutable:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName)
  return processname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::release_processname() {
  // @@protoc_insertion_point(field_release:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName)
  
  return processname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::set_allocated_processname(::std::string* processname) {
  if (processname != NULL) {
    
  } else {
    
  }
  processname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processname);
  // @@protoc_insertion_point(field_set_allocated:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.ProcessName)
}

// optional string WindowsName = 2;
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::clear_windowsname() {
  windowsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::windowsname() const {
  // @@protoc_insertion_point(field_get:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName)
  return windowsname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::set_windowsname(const ::std::string& value) {
  
  windowsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName)
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::set_windowsname(const char* value) {
  
  windowsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName)
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::set_windowsname(const char* value, size_t size) {
  
  windowsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName)
}
::std::string* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::mutable_windowsname() {
  
  // @@protoc_insertion_point(field_mutable:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName)
  return windowsname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::release_windowsname() {
  // @@protoc_insertion_point(field_release:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName)
  
  return windowsname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::set_allocated_windowsname(::std::string* windowsname) {
  if (windowsname != NULL) {
    
  } else {
    
  }
  windowsname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), windowsname);
  // @@protoc_insertion_point(field_set_allocated:SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload.WindowsName)
}

inline const SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::internal_default_instance() {
  return &SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload_default_instance_.get();
}
// -------------------------------------------------------------------

// SpiderKeyLoggingPayload

// optional bytes PlaintextKeylog = 1;
void SpiderKeyLoggingPayload::clear_plaintextkeylog() {
  plaintextkeylog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SpiderKeyLoggingPayload::plaintextkeylog() const {
  // @@protoc_insertion_point(field_get:SpiderKeyLoggingPayload.PlaintextKeylog)
  return plaintextkeylog_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpiderKeyLoggingPayload::set_plaintextkeylog(const ::std::string& value) {
  
  plaintextkeylog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SpiderKeyLoggingPayload.PlaintextKeylog)
}
void SpiderKeyLoggingPayload::set_plaintextkeylog(const char* value) {
  
  plaintextkeylog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpiderKeyLoggingPayload.PlaintextKeylog)
}
void SpiderKeyLoggingPayload::set_plaintextkeylog(const void* value, size_t size) {
  
  plaintextkeylog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpiderKeyLoggingPayload.PlaintextKeylog)
}
::std::string* SpiderKeyLoggingPayload::mutable_plaintextkeylog() {
  
  // @@protoc_insertion_point(field_mutable:SpiderKeyLoggingPayload.PlaintextKeylog)
  return plaintextkeylog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpiderKeyLoggingPayload::release_plaintextkeylog() {
  // @@protoc_insertion_point(field_release:SpiderKeyLoggingPayload.PlaintextKeylog)
  
  return plaintextkeylog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpiderKeyLoggingPayload::set_allocated_plaintextkeylog(::std::string* plaintextkeylog) {
  if (plaintextkeylog != NULL) {
    
  } else {
    
  }
  plaintextkeylog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plaintextkeylog);
  // @@protoc_insertion_point(field_set_allocated:SpiderKeyLoggingPayload.PlaintextKeylog)
}

// optional .SpiderKeyLoggingPayload.SpiderKeyLoggingContextPayload Context = 2;
bool SpiderKeyLoggingPayload::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void SpiderKeyLoggingPayload::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload& SpiderKeyLoggingPayload::context() const {
  // @@protoc_insertion_point(field_get:SpiderKeyLoggingPayload.Context)
  return context_ != NULL ? *context_
                         : *::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload::internal_default_instance();
}
::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* SpiderKeyLoggingPayload::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload;
  }
  // @@protoc_insertion_point(field_mutable:SpiderKeyLoggingPayload.Context)
  return context_;
}
::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* SpiderKeyLoggingPayload::release_context() {
  // @@protoc_insertion_point(field_release:SpiderKeyLoggingPayload.Context)
  
  ::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* temp = context_;
  context_ = NULL;
  return temp;
}
void SpiderKeyLoggingPayload::set_allocated_context(::SpiderKeyLoggingPayload_SpiderKeyLoggingContextPayload* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SpiderKeyLoggingPayload.Context)
}

inline const SpiderKeyLoggingPayload* SpiderKeyLoggingPayload::internal_default_instance() {
  return &SpiderKeyLoggingPayload_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
