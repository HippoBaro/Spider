// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/SpiderMouseEvent.proto

#ifndef PROTOBUF_Proto_2fSpiderMouseEvent_2eproto__INCLUDED
#define PROTOBUF_Proto_2fSpiderMouseEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto();
void protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto();
void protobuf_AssignDesc_Proto_2fSpiderMouseEvent_2eproto();
void protobuf_ShutdownFile_Proto_2fSpiderMouseEvent_2eproto();

class SpiderMouseEvent;

enum SpiderMouseEvent_MouseEventType {
  SpiderMouseEvent_MouseEventType_RBUTTON_CLICK = 0,
  SpiderMouseEvent_MouseEventType_LBUTTON_CLICK = 1,
  SpiderMouseEvent_MouseEventType_MBUTTON_CLICK = 4,
  SpiderMouseEvent_MouseEventType_MBUTTON_UP = 2,
  SpiderMouseEvent_MouseEventType_MBUTTON_DOWN = 3,
  SpiderMouseEvent_MouseEventType_SpiderMouseEvent_MouseEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SpiderMouseEvent_MouseEventType_SpiderMouseEvent_MouseEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SpiderMouseEvent_MouseEventType_IsValid(int value);
const SpiderMouseEvent_MouseEventType SpiderMouseEvent_MouseEventType_MouseEventType_MIN = SpiderMouseEvent_MouseEventType_RBUTTON_CLICK;
const SpiderMouseEvent_MouseEventType SpiderMouseEvent_MouseEventType_MouseEventType_MAX = SpiderMouseEvent_MouseEventType_MBUTTON_CLICK;
const int SpiderMouseEvent_MouseEventType_MouseEventType_ARRAYSIZE = SpiderMouseEvent_MouseEventType_MouseEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpiderMouseEvent_MouseEventType_descriptor();
inline const ::std::string& SpiderMouseEvent_MouseEventType_Name(SpiderMouseEvent_MouseEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpiderMouseEvent_MouseEventType_descriptor(), value);
}
inline bool SpiderMouseEvent_MouseEventType_Parse(
    const ::std::string& name, SpiderMouseEvent_MouseEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpiderMouseEvent_MouseEventType>(
    SpiderMouseEvent_MouseEventType_descriptor(), name, value);
}
// ===================================================================

class SpiderMouseEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SpiderMouseEvent) */ {
 public:
  SpiderMouseEvent();
  virtual ~SpiderMouseEvent();

  SpiderMouseEvent(const SpiderMouseEvent& from);

  inline SpiderMouseEvent& operator=(const SpiderMouseEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpiderMouseEvent& default_instance();

  static const SpiderMouseEvent* internal_default_instance();

  void Swap(SpiderMouseEvent* other);

  // implements Message ----------------------------------------------

  inline SpiderMouseEvent* New() const { return New(NULL); }

  SpiderMouseEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpiderMouseEvent& from);
  void MergeFrom(const SpiderMouseEvent& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpiderMouseEvent* other);
  void UnsafeMergeFrom(const SpiderMouseEvent& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SpiderMouseEvent_MouseEventType MouseEventType;
  static const MouseEventType RBUTTON_CLICK =
    SpiderMouseEvent_MouseEventType_RBUTTON_CLICK;
  static const MouseEventType LBUTTON_CLICK =
    SpiderMouseEvent_MouseEventType_LBUTTON_CLICK;
  static const MouseEventType MBUTTON_CLICK =
    SpiderMouseEvent_MouseEventType_MBUTTON_CLICK;
  static const MouseEventType MBUTTON_UP =
    SpiderMouseEvent_MouseEventType_MBUTTON_UP;
  static const MouseEventType MBUTTON_DOWN =
    SpiderMouseEvent_MouseEventType_MBUTTON_DOWN;
  static inline bool MouseEventType_IsValid(int value) {
    return SpiderMouseEvent_MouseEventType_IsValid(value);
  }
  static const MouseEventType MouseEventType_MIN =
    SpiderMouseEvent_MouseEventType_MouseEventType_MIN;
  static const MouseEventType MouseEventType_MAX =
    SpiderMouseEvent_MouseEventType_MouseEventType_MAX;
  static const int MouseEventType_ARRAYSIZE =
    SpiderMouseEvent_MouseEventType_MouseEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MouseEventType_descriptor() {
    return SpiderMouseEvent_MouseEventType_descriptor();
  }
  static inline const ::std::string& MouseEventType_Name(MouseEventType value) {
    return SpiderMouseEvent_MouseEventType_Name(value);
  }
  static inline bool MouseEventType_Parse(const ::std::string& name,
      MouseEventType* value) {
    return SpiderMouseEvent_MouseEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SpiderMouseEvent.MouseEventType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::SpiderMouseEvent_MouseEventType type() const;
  void set_type(::SpiderMouseEvent_MouseEventType value);

  // optional uint32 X = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // optional uint32 Y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SpiderMouseEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_Proto_2fSpiderMouseEvent_2eproto_impl();
  friend void  protobuf_AddDesc_Proto_2fSpiderMouseEvent_2eproto_impl();
  friend void protobuf_AssignDesc_Proto_2fSpiderMouseEvent_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fSpiderMouseEvent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SpiderMouseEvent> SpiderMouseEvent_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpiderMouseEvent

// optional .SpiderMouseEvent.MouseEventType type = 1;
inline void SpiderMouseEvent::clear_type() {
  type_ = 0;
}
inline ::SpiderMouseEvent_MouseEventType SpiderMouseEvent::type() const {
  // @@protoc_insertion_point(field_get:SpiderMouseEvent.type)
  return static_cast< ::SpiderMouseEvent_MouseEventType >(type_);
}
inline void SpiderMouseEvent::set_type(::SpiderMouseEvent_MouseEventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SpiderMouseEvent.type)
}

// optional uint32 X = 2;
inline void SpiderMouseEvent::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 SpiderMouseEvent::x() const {
  // @@protoc_insertion_point(field_get:SpiderMouseEvent.X)
  return x_;
}
inline void SpiderMouseEvent::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SpiderMouseEvent.X)
}

// optional uint32 Y = 3;
inline void SpiderMouseEvent::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 SpiderMouseEvent::y() const {
  // @@protoc_insertion_point(field_get:SpiderMouseEvent.Y)
  return y_;
}
inline void SpiderMouseEvent::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SpiderMouseEvent.Y)
}

inline const SpiderMouseEvent* SpiderMouseEvent::internal_default_instance() {
  return &SpiderMouseEvent_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SpiderMouseEvent_MouseEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SpiderMouseEvent_MouseEventType>() {
  return ::SpiderMouseEvent_MouseEventType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Proto_2fSpiderMouseEvent_2eproto__INCLUDED
