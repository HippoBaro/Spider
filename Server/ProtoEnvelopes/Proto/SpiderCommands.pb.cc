// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/SpiderCommands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpiderCommands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GetClientLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClientLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClientMouseLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClientMouseLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClientStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClientStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartKeylogging_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartKeylogging_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopKeylogging_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopKeylogging_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetClientDelay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetClientDelay_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillClient_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Proto_2fSpiderCommands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Proto_2fSpiderCommands_2eproto() {
  protobuf_AddDesc_Proto_2fSpiderCommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Proto/SpiderCommands.proto");
  GOOGLE_CHECK(file != NULL);
  GetClientLog_descriptor_ = file->message_type(0);
  static const int GetClientLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClientLog, limit_),
  };
  GetClientLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClientLog_descriptor_,
      GetClientLog::internal_default_instance(),
      GetClientLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClientLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClientLog, _internal_metadata_));
  GetClientMouseLog_descriptor_ = file->message_type(1);
  static const int GetClientMouseLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClientMouseLog, limit_),
  };
  GetClientMouseLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClientMouseLog_descriptor_,
      GetClientMouseLog::internal_default_instance(),
      GetClientMouseLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClientMouseLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClientMouseLog, _internal_metadata_));
  ClientList_descriptor_ = file->message_type(2);
  static const int ClientList_offsets_[1] = {
  };
  ClientList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientList_descriptor_,
      ClientList::internal_default_instance(),
      ClientList_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientList, _internal_metadata_));
  GetClientStatus_descriptor_ = file->message_type(3);
  static const int GetClientStatus_offsets_[1] = {
  };
  GetClientStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClientStatus_descriptor_,
      GetClientStatus::internal_default_instance(),
      GetClientStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClientStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClientStatus, _internal_metadata_));
  StartKeylogging_descriptor_ = file->message_type(4);
  static const int StartKeylogging_offsets_[1] = {
  };
  StartKeylogging_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartKeylogging_descriptor_,
      StartKeylogging::internal_default_instance(),
      StartKeylogging_offsets_,
      -1,
      -1,
      -1,
      sizeof(StartKeylogging),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKeylogging, _internal_metadata_));
  StopKeylogging_descriptor_ = file->message_type(5);
  static const int StopKeylogging_offsets_[1] = {
  };
  StopKeylogging_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopKeylogging_descriptor_,
      StopKeylogging::internal_default_instance(),
      StopKeylogging_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopKeylogging),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopKeylogging, _internal_metadata_));
  SetClientDelay_descriptor_ = file->message_type(6);
  static const int SetClientDelay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClientDelay, delay_),
  };
  SetClientDelay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetClientDelay_descriptor_,
      SetClientDelay::internal_default_instance(),
      SetClientDelay_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetClientDelay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetClientDelay, _internal_metadata_));
  ClientStatus_descriptor_ = file->message_type(7);
  static const int ClientStatus_offsets_[1] = {
  };
  ClientStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientStatus_descriptor_,
      ClientStatus::internal_default_instance(),
      ClientStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientStatus, _internal_metadata_));
  KillClient_descriptor_ = file->message_type(8);
  static const int KillClient_offsets_[1] = {
  };
  KillClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KillClient_descriptor_,
      KillClient::internal_default_instance(),
      KillClient_offsets_,
      -1,
      -1,
      -1,
      sizeof(KillClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillClient, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Proto_2fSpiderCommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClientLog_descriptor_, GetClientLog::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClientMouseLog_descriptor_, GetClientMouseLog::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientList_descriptor_, ClientList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClientStatus_descriptor_, GetClientStatus::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartKeylogging_descriptor_, StartKeylogging::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopKeylogging_descriptor_, StopKeylogging::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetClientDelay_descriptor_, SetClientDelay::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientStatus_descriptor_, ClientStatus::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KillClient_descriptor_, KillClient::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Proto_2fSpiderCommands_2eproto() {
  GetClientLog_default_instance_.Shutdown();
  delete GetClientLog_reflection_;
  GetClientMouseLog_default_instance_.Shutdown();
  delete GetClientMouseLog_reflection_;
  ClientList_default_instance_.Shutdown();
  delete ClientList_reflection_;
  GetClientStatus_default_instance_.Shutdown();
  delete GetClientStatus_reflection_;
  StartKeylogging_default_instance_.Shutdown();
  delete StartKeylogging_reflection_;
  StopKeylogging_default_instance_.Shutdown();
  delete StopKeylogging_reflection_;
  SetClientDelay_default_instance_.Shutdown();
  delete SetClientDelay_reflection_;
  ClientStatus_default_instance_.Shutdown();
  delete ClientStatus_reflection_;
  KillClient_default_instance_.Shutdown();
  delete KillClient_reflection_;
}

void protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  GetClientLog_default_instance_.DefaultConstruct();
  GetClientMouseLog_default_instance_.DefaultConstruct();
  ClientList_default_instance_.DefaultConstruct();
  GetClientStatus_default_instance_.DefaultConstruct();
  StartKeylogging_default_instance_.DefaultConstruct();
  StopKeylogging_default_instance_.DefaultConstruct();
  SetClientDelay_default_instance_.DefaultConstruct();
  ClientStatus_default_instance_.DefaultConstruct();
  KillClient_default_instance_.DefaultConstruct();
  GetClientLog_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetClientMouseLog_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClientList_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetClientStatus_default_instance_.get_mutable()->InitAsDefaultInstance();
  StartKeylogging_default_instance_.get_mutable()->InitAsDefaultInstance();
  StopKeylogging_default_instance_.get_mutable()->InitAsDefaultInstance();
  SetClientDelay_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClientStatus_default_instance_.get_mutable()->InitAsDefaultInstance();
  KillClient_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto_once_);
void protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto_once_,
                 &protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto_impl);
}
void protobuf_AddDesc_Proto_2fSpiderCommands_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Proto/SpiderCommands.proto\"\035\n\014GetClien"
    "tLog\022\r\n\005limit\030\001 \001(\005\"\"\n\021GetClientMouseLog"
    "\022\r\n\005limit\030\001 \001(\005\"\014\n\nClientList\"\021\n\017GetClie"
    "ntStatus\"\021\n\017StartKeylogging\"\020\n\016StopKeylo"
    "gging\"\037\n\016SetClientDelay\022\r\n\005delay\030\001 \001(\005\"\016"
    "\n\014ClientStatus\"\014\n\nKillClientb\006proto3", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Proto/SpiderCommands.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Proto_2fSpiderCommands_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Proto_2fSpiderCommands_2eproto_once_);
void protobuf_AddDesc_Proto_2fSpiderCommands_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Proto_2fSpiderCommands_2eproto_once_,
                 &protobuf_AddDesc_Proto_2fSpiderCommands_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Proto_2fSpiderCommands_2eproto {
  StaticDescriptorInitializer_Proto_2fSpiderCommands_2eproto() {
    protobuf_AddDesc_Proto_2fSpiderCommands_2eproto();
  }
} static_descriptor_initializer_Proto_2fSpiderCommands_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClientLog::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClientLog::GetClientLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetClientLog)
}

void GetClientLog::InitAsDefaultInstance() {
}

GetClientLog::GetClientLog(const GetClientLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetClientLog)
}

void GetClientLog::SharedCtor() {
  limit_ = 0;
  _cached_size_ = 0;
}

GetClientLog::~GetClientLog() {
  // @@protoc_insertion_point(destructor:GetClientLog)
  SharedDtor();
}

void GetClientLog::SharedDtor() {
}

void GetClientLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClientLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClientLog_descriptor_;
}

const GetClientLog& GetClientLog::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetClientLog> GetClientLog_default_instance_;

GetClientLog* GetClientLog::New(::google::protobuf::Arena* arena) const {
  GetClientLog* n = new GetClientLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClientLog::Clear() {
// @@protoc_insertion_point(message_clear_start:GetClientLog)
  limit_ = 0;
}

bool GetClientLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetClientLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 limit = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetClientLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetClientLog)
  return false;
#undef DO_
}

void GetClientLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetClientLog)
  // optional int32 limit = 1;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:GetClientLog)
}

::google::protobuf::uint8* GetClientLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetClientLog)
  // optional int32 limit = 1;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GetClientLog)
  return target;
}

size_t GetClientLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetClientLog)
  size_t total_size = 0;

  // optional int32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClientLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetClientLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetClientLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClientLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetClientLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetClientLog)
    UnsafeMergeFrom(*source);
  }
}

void GetClientLog::MergeFrom(const GetClientLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetClientLog)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetClientLog::UnsafeMergeFrom(const GetClientLog& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void GetClientLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetClientLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClientLog::CopyFrom(const GetClientLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetClientLog)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetClientLog::IsInitialized() const {

  return true;
}

void GetClientLog::Swap(GetClientLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClientLog::InternalSwap(GetClientLog* other) {
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClientLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClientLog_descriptor_;
  metadata.reflection = GetClientLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClientLog

// optional int32 limit = 1;
void GetClientLog::clear_limit() {
  limit_ = 0;
}
::google::protobuf::int32 GetClientLog::limit() const {
  // @@protoc_insertion_point(field_get:GetClientLog.limit)
  return limit_;
}
void GetClientLog::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:GetClientLog.limit)
}

inline const GetClientLog* GetClientLog::internal_default_instance() {
  return &GetClientLog_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClientMouseLog::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClientMouseLog::GetClientMouseLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetClientMouseLog)
}

void GetClientMouseLog::InitAsDefaultInstance() {
}

GetClientMouseLog::GetClientMouseLog(const GetClientMouseLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetClientMouseLog)
}

void GetClientMouseLog::SharedCtor() {
  limit_ = 0;
  _cached_size_ = 0;
}

GetClientMouseLog::~GetClientMouseLog() {
  // @@protoc_insertion_point(destructor:GetClientMouseLog)
  SharedDtor();
}

void GetClientMouseLog::SharedDtor() {
}

void GetClientMouseLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClientMouseLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClientMouseLog_descriptor_;
}

const GetClientMouseLog& GetClientMouseLog::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetClientMouseLog> GetClientMouseLog_default_instance_;

GetClientMouseLog* GetClientMouseLog::New(::google::protobuf::Arena* arena) const {
  GetClientMouseLog* n = new GetClientMouseLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClientMouseLog::Clear() {
// @@protoc_insertion_point(message_clear_start:GetClientMouseLog)
  limit_ = 0;
}

bool GetClientMouseLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetClientMouseLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 limit = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetClientMouseLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetClientMouseLog)
  return false;
#undef DO_
}

void GetClientMouseLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetClientMouseLog)
  // optional int32 limit = 1;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:GetClientMouseLog)
}

::google::protobuf::uint8* GetClientMouseLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetClientMouseLog)
  // optional int32 limit = 1;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GetClientMouseLog)
  return target;
}

size_t GetClientMouseLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetClientMouseLog)
  size_t total_size = 0;

  // optional int32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClientMouseLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetClientMouseLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetClientMouseLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClientMouseLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetClientMouseLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetClientMouseLog)
    UnsafeMergeFrom(*source);
  }
}

void GetClientMouseLog::MergeFrom(const GetClientMouseLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetClientMouseLog)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetClientMouseLog::UnsafeMergeFrom(const GetClientMouseLog& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void GetClientMouseLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetClientMouseLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClientMouseLog::CopyFrom(const GetClientMouseLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetClientMouseLog)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetClientMouseLog::IsInitialized() const {

  return true;
}

void GetClientMouseLog::Swap(GetClientMouseLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClientMouseLog::InternalSwap(GetClientMouseLog* other) {
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClientMouseLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClientMouseLog_descriptor_;
  metadata.reflection = GetClientMouseLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClientMouseLog

// optional int32 limit = 1;
void GetClientMouseLog::clear_limit() {
  limit_ = 0;
}
::google::protobuf::int32 GetClientMouseLog::limit() const {
  // @@protoc_insertion_point(field_get:GetClientMouseLog.limit)
  return limit_;
}
void GetClientMouseLog::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:GetClientMouseLog.limit)
}

inline const GetClientMouseLog* GetClientMouseLog::internal_default_instance() {
  return &GetClientMouseLog_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientList::ClientList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientList)
}

void ClientList::InitAsDefaultInstance() {
}

ClientList::ClientList(const ClientList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientList)
}

void ClientList::SharedCtor() {
  _cached_size_ = 0;
}

ClientList::~ClientList() {
  // @@protoc_insertion_point(destructor:ClientList)
  SharedDtor();
}

void ClientList::SharedDtor() {
}

void ClientList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientList_descriptor_;
}

const ClientList& ClientList::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClientList> ClientList_default_instance_;

ClientList* ClientList::New(::google::protobuf::Arena* arena) const {
  ClientList* n = new ClientList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientList::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientList)
}

bool ClientList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ClientList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientList)
  return false;
#undef DO_
}

void ClientList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientList)
  // @@protoc_insertion_point(serialize_end:ClientList)
}

::google::protobuf::uint8* ClientList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ClientList)
  // @@protoc_insertion_point(serialize_to_array_end:ClientList)
  return target;
}

size_t ClientList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientList)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientList)
    UnsafeMergeFrom(*source);
  }
}

void ClientList::MergeFrom(const ClientList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClientList::UnsafeMergeFrom(const ClientList& from) {
  GOOGLE_DCHECK(&from != this);
}

void ClientList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientList::CopyFrom(const ClientList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClientList::IsInitialized() const {

  return true;
}

void ClientList::Swap(ClientList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientList::InternalSwap(ClientList* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientList_descriptor_;
  metadata.reflection = ClientList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientList

inline const ClientList* ClientList::internal_default_instance() {
  return &ClientList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClientStatus::GetClientStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetClientStatus)
}

void GetClientStatus::InitAsDefaultInstance() {
}

GetClientStatus::GetClientStatus(const GetClientStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetClientStatus)
}

void GetClientStatus::SharedCtor() {
  _cached_size_ = 0;
}

GetClientStatus::~GetClientStatus() {
  // @@protoc_insertion_point(destructor:GetClientStatus)
  SharedDtor();
}

void GetClientStatus::SharedDtor() {
}

void GetClientStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClientStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClientStatus_descriptor_;
}

const GetClientStatus& GetClientStatus::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetClientStatus> GetClientStatus_default_instance_;

GetClientStatus* GetClientStatus::New(::google::protobuf::Arena* arena) const {
  GetClientStatus* n = new GetClientStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClientStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:GetClientStatus)
}

bool GetClientStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetClientStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:GetClientStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetClientStatus)
  return false;
#undef DO_
}

void GetClientStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetClientStatus)
  // @@protoc_insertion_point(serialize_end:GetClientStatus)
}

::google::protobuf::uint8* GetClientStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetClientStatus)
  // @@protoc_insertion_point(serialize_to_array_end:GetClientStatus)
  return target;
}

size_t GetClientStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetClientStatus)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClientStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetClientStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetClientStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClientStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetClientStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetClientStatus)
    UnsafeMergeFrom(*source);
  }
}

void GetClientStatus::MergeFrom(const GetClientStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetClientStatus)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetClientStatus::UnsafeMergeFrom(const GetClientStatus& from) {
  GOOGLE_DCHECK(&from != this);
}

void GetClientStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClientStatus::CopyFrom(const GetClientStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetClientStatus)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetClientStatus::IsInitialized() const {

  return true;
}

void GetClientStatus::Swap(GetClientStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClientStatus::InternalSwap(GetClientStatus* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClientStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClientStatus_descriptor_;
  metadata.reflection = GetClientStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClientStatus

inline const GetClientStatus* GetClientStatus::internal_default_instance() {
  return &GetClientStatus_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartKeylogging::StartKeylogging()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartKeylogging)
}

void StartKeylogging::InitAsDefaultInstance() {
}

StartKeylogging::StartKeylogging(const StartKeylogging& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StartKeylogging)
}

void StartKeylogging::SharedCtor() {
  _cached_size_ = 0;
}

StartKeylogging::~StartKeylogging() {
  // @@protoc_insertion_point(destructor:StartKeylogging)
  SharedDtor();
}

void StartKeylogging::SharedDtor() {
}

void StartKeylogging::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartKeylogging::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartKeylogging_descriptor_;
}

const StartKeylogging& StartKeylogging::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StartKeylogging> StartKeylogging_default_instance_;

StartKeylogging* StartKeylogging::New(::google::protobuf::Arena* arena) const {
  StartKeylogging* n = new StartKeylogging;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartKeylogging::Clear() {
// @@protoc_insertion_point(message_clear_start:StartKeylogging)
}

bool StartKeylogging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StartKeylogging)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:StartKeylogging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartKeylogging)
  return false;
#undef DO_
}

void StartKeylogging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartKeylogging)
  // @@protoc_insertion_point(serialize_end:StartKeylogging)
}

::google::protobuf::uint8* StartKeylogging::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StartKeylogging)
  // @@protoc_insertion_point(serialize_to_array_end:StartKeylogging)
  return target;
}

size_t StartKeylogging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartKeylogging)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartKeylogging::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartKeylogging)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StartKeylogging* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartKeylogging>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartKeylogging)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartKeylogging)
    UnsafeMergeFrom(*source);
  }
}

void StartKeylogging::MergeFrom(const StartKeylogging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartKeylogging)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StartKeylogging::UnsafeMergeFrom(const StartKeylogging& from) {
  GOOGLE_DCHECK(&from != this);
}

void StartKeylogging::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartKeylogging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartKeylogging::CopyFrom(const StartKeylogging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartKeylogging)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StartKeylogging::IsInitialized() const {

  return true;
}

void StartKeylogging::Swap(StartKeylogging* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartKeylogging::InternalSwap(StartKeylogging* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartKeylogging::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartKeylogging_descriptor_;
  metadata.reflection = StartKeylogging_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartKeylogging

inline const StartKeylogging* StartKeylogging::internal_default_instance() {
  return &StartKeylogging_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopKeylogging::StopKeylogging()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopKeylogging)
}

void StopKeylogging::InitAsDefaultInstance() {
}

StopKeylogging::StopKeylogging(const StopKeylogging& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StopKeylogging)
}

void StopKeylogging::SharedCtor() {
  _cached_size_ = 0;
}

StopKeylogging::~StopKeylogging() {
  // @@protoc_insertion_point(destructor:StopKeylogging)
  SharedDtor();
}

void StopKeylogging::SharedDtor() {
}

void StopKeylogging::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopKeylogging::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopKeylogging_descriptor_;
}

const StopKeylogging& StopKeylogging::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StopKeylogging> StopKeylogging_default_instance_;

StopKeylogging* StopKeylogging::New(::google::protobuf::Arena* arena) const {
  StopKeylogging* n = new StopKeylogging;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopKeylogging::Clear() {
// @@protoc_insertion_point(message_clear_start:StopKeylogging)
}

bool StopKeylogging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StopKeylogging)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:StopKeylogging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StopKeylogging)
  return false;
#undef DO_
}

void StopKeylogging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StopKeylogging)
  // @@protoc_insertion_point(serialize_end:StopKeylogging)
}

::google::protobuf::uint8* StopKeylogging::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StopKeylogging)
  // @@protoc_insertion_point(serialize_to_array_end:StopKeylogging)
  return target;
}

size_t StopKeylogging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopKeylogging)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopKeylogging::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopKeylogging)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StopKeylogging* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopKeylogging>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopKeylogging)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopKeylogging)
    UnsafeMergeFrom(*source);
  }
}

void StopKeylogging::MergeFrom(const StopKeylogging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopKeylogging)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StopKeylogging::UnsafeMergeFrom(const StopKeylogging& from) {
  GOOGLE_DCHECK(&from != this);
}

void StopKeylogging::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopKeylogging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopKeylogging::CopyFrom(const StopKeylogging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopKeylogging)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StopKeylogging::IsInitialized() const {

  return true;
}

void StopKeylogging::Swap(StopKeylogging* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopKeylogging::InternalSwap(StopKeylogging* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopKeylogging::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopKeylogging_descriptor_;
  metadata.reflection = StopKeylogging_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopKeylogging

inline const StopKeylogging* StopKeylogging::internal_default_instance() {
  return &StopKeylogging_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetClientDelay::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetClientDelay::SetClientDelay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetClientDelay)
}

void SetClientDelay::InitAsDefaultInstance() {
}

SetClientDelay::SetClientDelay(const SetClientDelay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetClientDelay)
}

void SetClientDelay::SharedCtor() {
  delay_ = 0;
  _cached_size_ = 0;
}

SetClientDelay::~SetClientDelay() {
  // @@protoc_insertion_point(destructor:SetClientDelay)
  SharedDtor();
}

void SetClientDelay::SharedDtor() {
}

void SetClientDelay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetClientDelay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetClientDelay_descriptor_;
}

const SetClientDelay& SetClientDelay::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SetClientDelay> SetClientDelay_default_instance_;

SetClientDelay* SetClientDelay::New(::google::protobuf::Arena* arena) const {
  SetClientDelay* n = new SetClientDelay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetClientDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:SetClientDelay)
  delay_ = 0;
}

bool SetClientDelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetClientDelay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetClientDelay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetClientDelay)
  return false;
#undef DO_
}

void SetClientDelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetClientDelay)
  // optional int32 delay = 1;
  if (this->delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }

  // @@protoc_insertion_point(serialize_end:SetClientDelay)
}

::google::protobuf::uint8* SetClientDelay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SetClientDelay)
  // optional int32 delay = 1;
  if (this->delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SetClientDelay)
  return target;
}

size_t SetClientDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetClientDelay)
  size_t total_size = 0;

  // optional int32 delay = 1;
  if (this->delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetClientDelay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetClientDelay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetClientDelay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetClientDelay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetClientDelay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetClientDelay)
    UnsafeMergeFrom(*source);
  }
}

void SetClientDelay::MergeFrom(const SetClientDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetClientDelay)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SetClientDelay::UnsafeMergeFrom(const SetClientDelay& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
}

void SetClientDelay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetClientDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetClientDelay::CopyFrom(const SetClientDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetClientDelay)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SetClientDelay::IsInitialized() const {

  return true;
}

void SetClientDelay::Swap(SetClientDelay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetClientDelay::InternalSwap(SetClientDelay* other) {
  std::swap(delay_, other->delay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetClientDelay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetClientDelay_descriptor_;
  metadata.reflection = SetClientDelay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetClientDelay

// optional int32 delay = 1;
void SetClientDelay::clear_delay() {
  delay_ = 0;
}
::google::protobuf::int32 SetClientDelay::delay() const {
  // @@protoc_insertion_point(field_get:SetClientDelay.delay)
  return delay_;
}
void SetClientDelay::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:SetClientDelay.delay)
}

inline const SetClientDelay* SetClientDelay::internal_default_instance() {
  return &SetClientDelay_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientStatus::ClientStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientStatus)
}

void ClientStatus::InitAsDefaultInstance() {
}

ClientStatus::ClientStatus(const ClientStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientStatus)
}

void ClientStatus::SharedCtor() {
  _cached_size_ = 0;
}

ClientStatus::~ClientStatus() {
  // @@protoc_insertion_point(destructor:ClientStatus)
  SharedDtor();
}

void ClientStatus::SharedDtor() {
}

void ClientStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientStatus_descriptor_;
}

const ClientStatus& ClientStatus::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClientStatus> ClientStatus_default_instance_;

ClientStatus* ClientStatus::New(::google::protobuf::Arena* arena) const {
  ClientStatus* n = new ClientStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientStatus)
}

bool ClientStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ClientStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientStatus)
  return false;
#undef DO_
}

void ClientStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientStatus)
  // @@protoc_insertion_point(serialize_end:ClientStatus)
}

::google::protobuf::uint8* ClientStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ClientStatus)
  // @@protoc_insertion_point(serialize_to_array_end:ClientStatus)
  return target;
}

size_t ClientStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientStatus)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientStatus)
    UnsafeMergeFrom(*source);
  }
}

void ClientStatus::MergeFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientStatus)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClientStatus::UnsafeMergeFrom(const ClientStatus& from) {
  GOOGLE_DCHECK(&from != this);
}

void ClientStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientStatus::CopyFrom(const ClientStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientStatus)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClientStatus::IsInitialized() const {

  return true;
}

void ClientStatus::Swap(ClientStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientStatus::InternalSwap(ClientStatus* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientStatus_descriptor_;
  metadata.reflection = ClientStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientStatus

inline const ClientStatus* ClientStatus::internal_default_instance() {
  return &ClientStatus_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KillClient::KillClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:KillClient)
}

void KillClient::InitAsDefaultInstance() {
}

KillClient::KillClient(const KillClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KillClient)
}

void KillClient::SharedCtor() {
  _cached_size_ = 0;
}

KillClient::~KillClient() {
  // @@protoc_insertion_point(destructor:KillClient)
  SharedDtor();
}

void KillClient::SharedDtor() {
}

void KillClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillClient_descriptor_;
}

const KillClient& KillClient::default_instance() {
  protobuf_InitDefaults_Proto_2fSpiderCommands_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KillClient> KillClient_default_instance_;

KillClient* KillClient::New(::google::protobuf::Arena* arena) const {
  KillClient* n = new KillClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KillClient::Clear() {
// @@protoc_insertion_point(message_clear_start:KillClient)
}

bool KillClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KillClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:KillClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KillClient)
  return false;
#undef DO_
}

void KillClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KillClient)
  // @@protoc_insertion_point(serialize_end:KillClient)
}

::google::protobuf::uint8* KillClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KillClient)
  // @@protoc_insertion_point(serialize_to_array_end:KillClient)
  return target;
}

size_t KillClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KillClient)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KillClient)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KillClient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KillClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KillClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KillClient)
    UnsafeMergeFrom(*source);
  }
}

void KillClient::MergeFrom(const KillClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KillClient)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KillClient::UnsafeMergeFrom(const KillClient& from) {
  GOOGLE_DCHECK(&from != this);
}

void KillClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KillClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillClient::CopyFrom(const KillClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KillClient)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KillClient::IsInitialized() const {

  return true;
}

void KillClient::Swap(KillClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KillClient::InternalSwap(KillClient* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KillClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillClient_descriptor_;
  metadata.reflection = KillClient_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KillClient

inline const KillClient* KillClient::internal_default_instance() {
  return &KillClient_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
